import os
import logging
import random
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv
import aiofiles

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—Ä–æ–≤–Ω–µ–º DEBUG
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(name)s - %(funcName)s: %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot_debug.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
class Config:
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    SPECIALIST_CHAT_ID = os.getenv("SPECIALIST_CHAT_ID")

    @classmethod
    def validate(cls):
        missing = []
        if not cls.BOT_TOKEN:
            missing.append("BOT_TOKEN")
        if not cls.SPECIALIST_CHAT_ID:
            missing.append("SPECIALIST_CHAT_ID")

        if missing:
            logger.critical(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}")
            exit(1)
        logger.info("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")


Config.validate()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=Config.BOT_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
REQUEST_COUNTER_FILE = 'request_counter.txt'


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
class Keyboards:
    @staticmethod
    def create_reply(buttons):
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for row in buttons:
            kb.row(*[types.KeyboardButton(btn) for btn in row])
        return kb

    MAIN = create_reply([
        ["üìö –£—á–µ–±–Ω—ã–π –≤–æ–ø—Ä–æ—Å", "üèóÔ∏è –†–∞–±–æ—á–∏–π –≤–æ–ø—Ä–æ—Å"]
    ])
    CANCEL = create_reply([["–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞"]])
    NEW_REQUEST = create_reply([["üìù –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!"]])
    URGENCY = create_reply([
        ["–°—Ä–æ—á–Ω–æ (24—á)", "3-5 –¥–Ω–µ–π"],
        ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (7 –¥–Ω–µ–π)", "–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞"]
    ])
    OBJECT_TYPE = create_reply([
        ["–ñ–∏–ª–æ–π –¥–æ–º", "–ö–≤–∞—Ä—Ç–∏—Ä–∞"],
        ["–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ", "–î—Ä—É–≥–æ–µ"],
        ["–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞"]
    ])
    CONFIRM = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
    )


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    request_type = State()
    answers = State()
    confirm = State()


# –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
class Templates:
    WELCOME = [
        "–°–Ω–æ–≤–∞ –∫ –Ω–∞–º? –û—Ç–ª–∏—á–Ω–æ! –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - –Ω–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è!",
        "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –ß–µ–º –ø–æ–º–æ–∂–µ–º —Å–µ–≥–æ–¥–Ω—è?",
        "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å - –ø—É—Ç—å –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ä–µ—à–µ–Ω–∏—é!"
    ]

    @staticmethod
    def price_report(request_type: str, data: dict) -> str:
        logger.debug(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ü–µ–Ω–µ –¥–ª—è {request_type} —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        try:
            params = PRICES[request_type]
            answers = data['answers']

            if request_type == 'study':
                pages = int(answers[1])
                urgency = answers[2]
                base_total = params['base'] * pages
                total = base_total * params['urgency'][urgency]
                return (
                    f"üìö <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–µ–±–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:</b>\n"
                    f"- –°—Ç—Ä–∞–Ω–∏—Ü: {pages} √ó {params['base']}‚ÇΩ = {base_total}‚ÇΩ\n"
                    f"- –°—Ä–æ—á–Ω–æ—Å—Ç—å ({urgency}): √ó{params['urgency'][urgency]}\n"
                    f"‚ûî <b>–ò—Ç–æ–≥–æ: {int(total)}‚ÇΩ</b>\n"
                    "<i>–¶–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —Å–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º</i>"
                )
            else:
                object_type = answers[1]
                urgency = answers[2]
                total = params['base'] * params['object_type'][object_type] * params['urgency'][urgency]
                return (
                    f"üèóÔ∏è <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:</b>\n"
                    f"- –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {params['base']}‚ÇΩ\n"
                    f"- –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ ({object_type}): √ó{params['object_type'][object_type]}\n"
                    f"- –°—Ä–æ—á–Ω–æ—Å—Ç—å ({urgency}): √ó{params['urgency'][urgency]}\n"
                    f"‚ûî <b>–ò—Ç–æ–≥–æ: {int(total)}‚ÇΩ</b>\n"
                    "<i>–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞</i>"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ü–µ–Ω–µ: {e}", exc_info=True)
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."


# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ–Ω
PRICES = {
    'study': {
        'base': 800,
        'urgency': {
            "–°—Ä–æ—á–Ω–æ (24—á)": 1.8,
            "3-5 –¥–Ω–µ–π": 1.3,
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (7 –¥–Ω–µ–π)": 1.0
        }
    },
    'work': {
        'base': 1500,
        'object_type': {
            "–ñ–∏–ª–æ–π –¥–æ–º": 1.0,
            "–ö–≤–∞—Ä—Ç–∏—Ä–∞": 0.9,
            "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ": 1.2,
            "–î—Ä—É–≥–æ–µ": 1.1
        },
        'urgency': {
            "–°—Ä–æ—á–Ω–æ (24—á)": 2.0,
            "3-5 –¥–Ω–µ–π": 1.5,
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (7 –¥–Ω–µ–π)": 1.0
        }
    }
}


# –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
async def get_next_request_number() -> int:
    try:
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞ {REQUEST_COUNTER_FILE}")

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(REQUEST_COUNTER_FILE):
            async with aiofiles.open(REQUEST_COUNTER_FILE, 'w') as f:
                await f.write('0')
            logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")

        async with aiofiles.open(REQUEST_COUNTER_FILE, 'r+') as f:
            content = await f.read()
            counter = int(content.strip()) if content else 0
            logger.debug(f"–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: {counter}")

            counter += 1
            await f.seek(0)
            await f.truncate()
            await f.write(str(counter))
            return counter

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º —Å—á–µ—Ç—á–∏–∫–∞: {e}", exc_info=True)
        return random.randint(1000, 9999)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await Form.request_type.set()
    await message.answer(
        "üë®üíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞:",
        reply_markup=Keyboards.MAIN
    )


@dp.message_handler(Text("üìù –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!"))
async def new_request(message: types.Message):
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    await Form.request_type.set()
    await message.answer(random.choice(Templates.WELCOME), reply_markup=Keyboards.MAIN)


@dp.message_handler(Text(equals=["üìö –£—á–µ–±–Ω—ã–π –≤–æ–ø—Ä–æ—Å", "üèóÔ∏è –†–∞–±–æ—á–∏–π –≤–æ–ø—Ä–æ—Å"]), state=Form.request_type)
async def process_type(message: types.Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {message.text}")

    request_type = 'study' if "–£—á–µ–±–Ω—ã–π" in message.text else 'work'
    questions = [
        "üìù –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —É—á–µ–±–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:" if request_type == 'study'
        else "üíº –û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–∞–±–æ—á–∏–π –≤–æ–ø—Ä–æ—Å/–ø—Ä–æ–±–ª–µ–º—É:",
        "üìÑ –¢—Ä–µ–±—É–µ–º—ã–π –æ–±—ä–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü):" if request_type == 'study'
        else "üè≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:",
        "‚è≥ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        "üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:"
    ]

    await state.update_data({
        'request_type': request_type,
        'questions': questions,
        'current_question': 0,
        'answers': []
    })

    logger.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {request_type}: {questions}")
    await Form.answers.set()
    await message.answer(questions[0], reply_markup=Keyboards.CANCEL)


@dp.message_handler(state=Form.answers)
async def process_answers(message: types.Message, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    data = await state.get_data()
    current = data['current_question']
    request_type = data['request_type']
    answer = message.text

    logger.debug(f"–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {current}, —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {request_type}, –æ—Ç–≤–µ—Ç: {answer}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    validation_map = {
        'study': {
            1: (lambda a: not (a.isdigit() and int(a) > 0), "üî¢ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü!", Keyboards.CANCEL),
            2: (lambda a: a not in PRICES['study']['urgency'], "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å:", Keyboards.URGENCY)
        },
        'work': {
            1: (lambda a: a not in PRICES['work']['object_type'], "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:", Keyboards.OBJECT_TYPE),
            2: (lambda a: a not in PRICES['work']['urgency'], "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å:", Keyboards.URGENCY)
        }
    }

    if current in validation_map.get(request_type, {}):
        check, error, kb = validation_map[request_type][current]
        if check(answer):
            logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ —à–∞–≥–µ {current}: {error}")
            await message.answer(error, reply_markup=kb)
            return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answers = data['answers'] + [answer]
    current += 1

    logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –æ—Ç–≤–µ—Ç—ã={answers}, —Ç–µ–∫—É—â–∏–π —à–∞–≥={current}")

    if current < len(data['questions']):
        next_question = data['questions'][current]
        keyboard = Keyboards.CANCEL

        if current == 1 and request_type == 'work':
            keyboard = Keyboards.OBJECT_TYPE
        elif current == 2:
            keyboard = Keyboards.URGENCY

        await state.update_data({
            'current_question': current,
            'answers': answers
        })

        logger.debug(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É {current}: {next_question}")
        await message.answer(next_question, reply_markup=keyboard)
    else:
        logger.debug("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é")
        price_report = Templates.price_report(request_type, {'answers': answers})
        await state.update_data({
            'price_report': price_report,
            'answers': answers
        })
        await Form.confirm.set()

        await message.answer(price_report, parse_mode="HTML")
        await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å?", reply_markup=Keyboards.CONFIRM)


@dp.callback_query_handler(Text(startswith="confirm_"), state=Form.confirm)
async def handle_confirmation(callback: types.CallbackQuery, state: FSMContext):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {callback.data}")

    try:
        data = await state.get_data()
        request_number = await get_next_request_number()

        if callback.data == "confirm_yes":
            report = await generate_report(callback.from_user, data, request_number)

            await bot.send_message(
                chat_id=Config.SPECIALIST_CHAT_ID,
                text=report,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è",
                        url=f"tg://user?id={callback.from_user.id}"
                    )
                )
            )

            await callback.message.answer(
                f"‚úÖ –ó–∞–ø—Ä–æ—Å ‚Ññ{request_number} –ø—Ä–∏–Ω—è—Ç!\n"
                "‚ö†Ô∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
                reply_markup=Keyboards.NEW_REQUEST
            )
            logger.info(f"–ó–∞–ø—Ä–æ—Å {request_number} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        else:
            await callback.message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=Keyboards.NEW_REQUEST)
            logger.info("–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        await callback.message.answer("‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    finally:
        await state.finish()
        logger.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


async def generate_report(user: types.User, data: dict, request_number: int) -> str:
    logger.debug(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {request_number}")

    try:
        cost_str = data.get('price_report', '').split('–ò—Ç–æ–≥–æ: ')[1].split('‚ÇΩ')[0].strip()
        cost = int(cost_str)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}", exc_info=True)
        cost = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"

    return (
            f"üìã –ó–∞–ø—Ä–æ—Å ‚Ññ{request_number}\n"
            f"–¢–∏–ø: {'–£—á–µ–±–Ω—ã–π' if data['request_type'] == 'study' else '–†–∞–±–æ—á–∏–π'}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or 'N/A'}\n"
            f"ID: {user.id}\n" +
            "\n".join(f"{q}: {a}" for q, a in zip(data['questions'], data['answers'])) +
            f"\n–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ"
    )


async def on_startup(dp):
    logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    await bot.delete_webhook()


async def on_shutdown(dp):
    logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await dp.storage.close()
    await bot.session.close()


if __name__ == '__main__':
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    executor.start_polling(
        dp,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        timeout=30,
        relax=0.1
    )