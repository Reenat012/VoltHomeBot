import asyncio  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –∫–æ–¥–æ–º
import os  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è

from aiogram.dispatcher.filters import CommandStart
from dotenv import load_dotenv  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
from aiogram import Bot, Dispatcher  # –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram
from aiogram.types import Message  # –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ Message –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
from tornado.routing import Router

# –ò–º–ø–æ—Ä—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())  # –§–∏–ª—å—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /start
async def cmd_start(message: Message) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (first_name) –∏ —Ñ–∞–º–∏–ª–∏—é (last_name), –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name or ""  # –ï—Å–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ—Ç, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {first_name} {last_name}!")


# –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
async def main():
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot = Bot(token=os.getenv("BOT_TOKEN"))

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    dp = Dispatcher()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥
    dp.include_router(router)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ (polling)
    await dp.start_polling(bot)


# –ï—Å–ª–∏ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é (–∞ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –º–æ–¥—É–ª—å),
# —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main()
if __name__ == "__main__":
    asyncio.run(main())


# """
# –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Webhook –¥–ª—è Timeweb
# """
#
# # –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
# import os
# import logging
# from aiogram import Bot, Dispatcher, types, executor
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.dispatcher import FSMContext
# from aiogram.dispatcher.filters.state import State, StatesGroup
# from aiogram.utils.executor import start_webhook
# from dotenv import load_dotenv
#
#
# load_dotenv()
#
# # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
# WEBHOOK_HOST = 'https://reenat012-volthomebot-2d67.twc1.net' #–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
# WEBHOOK_PATH = '/webhook'
# WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
#
# WEBAPP_HOST = '0.0.0.0'
# WEBAPP_PORT = 8000  # –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Nginx
#
# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# bot = Bot(token=os.getenv("BOT_TOKEN"))
# storage = MemoryStorage()
# dp = Dispatcher(bot, storage=storage)
#
# # ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ==================
# cancel_kb = types.ReplyKeyboardMarkup(
#     [[types.KeyboardButton("–û—Ç–º–µ–Ω–∞")]],
#     resize_keyboard=True
# )
#
# confirm_kb = types.InlineKeyboardMarkup().row(
#     types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
#     types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
# )
#
# QUESTIONS = [
#     "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
#     "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã:",
#     "–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã (–º¬≤):",
#     "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
#     "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –º–æ—â–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–±–æ—Ä—ã:",
#     "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:"
# ]
#
# class Form(StatesGroup):
#     """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–∏–∞–ª–æ–≥–∞"""
#     answers = State()
#     confirm = State()
#
# # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã
# BASE_PRICES = {
#     1: (10000, 18000),
#     2: (18000, 30000),
#     3: (30000, 50000),
#     4: (50000, None)
# }
#
# def calculate_price(data):
#     try:
#         rooms = int(data['answers'][3])
#         area = float(data['answers'][2])
#
#         if rooms >= 4 or area > 100:
#             return "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç (–∫–≤–∞—Ä—Ç–∏—Ä–∞ –±–æ–ª–µ–µ 100 –º¬≤ –∏–ª–∏ 4+ –∫–æ–º–Ω–∞—Ç)"
#
#         base_min, base_max = BASE_PRICES.get(rooms, (0, 0))
#         base_price = (base_min + base_max) // 2
#
#         report = [
#             "üîß *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:*",
#             f"- –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ({rooms}-–∫–æ–º–Ω., {area} –º¬≤): {base_price:,} —Ä—É–±.",
#             f"üíé *–ò—Ç–æ–≥–æ: ~{base_price:,} —Ä—É–±.*",
#             "\n_–£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–π. –¢–æ—á–Ω–∞—è —Å—É–º–º–∞ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¢–ó._"
#         ]
#
#         return '\n'.join(report).replace(',', ' ')
#     except Exception as e:
#         return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ò–Ω–∂–µ–Ω–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π."
#
# # ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ==================
# @dp.message_handler(commands=['start', 'help'])
# async def cmd_start(message: types.Message):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
#     await Form.answers.set()
#     await message.answer("üîå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:", reply_markup=cancel_kb)
#     await message.answer(QUESTIONS[0])
#
#     async with dp.current_state().proxy() as data:
#         data['current_question'] = 0
#         data['answers'] = []
#
# @dp.message_handler(state=Form.answers)
# async def process_answers(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         current_question = data['current_question']
#         answer = message.text
#
#         if current_question == 2 and not answer.replace('.', '').isdigit():
#             await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 45.5)!")
#             return
#         elif current_question == 3 and not answer.isdigit():
#             await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
#             return
#
#         data['answers'].append(answer)
#
#         if current_question < len(QUESTIONS) - 1:
#             data['current_question'] += 1
#             await message.answer(QUESTIONS[data['current_question']])
#         else:
#             price_report = calculate_price(data)
#             await Form.confirm.set()
#             await message.answer(price_report, parse_mode="Markdown")
#             await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?", reply_markup=confirm_kb)
#
# @dp.callback_query_handler(lambda c: c.data in ['confirm_yes', 'confirm_no'], state=Form.confirm)
# async def process_confirmation(callback: types.CallbackQuery, state: FSMContext):
#     if callback.data == 'confirm_yes':
#         async with state.proxy() as data:
#             report = "üìã *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\n"
#             report += f"üë§ {data['answers'][0]} (ID: {callback.from_user.id})\n"
#             report += f"üìç –ê–¥—Ä–µ—Å: {data['answers'][1]}\n\n"
#
#             for q, a in zip(QUESTIONS[2:], data['answers'][2:]):
#                 report += f"*{q}*\n{a}\n\n"
#
#             await bot.send_message(
#                 chat_id=os.getenv("DESIGNER_CHAT_ID"),
#                 text=report,
#                 parse_mode="Markdown"
#             )
#             await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!")
#     else:
#         await callback.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
#     await state.finish()
#
# async def on_startup(dp):
#     await bot.set_webhook(WEBHOOK_URL)
#     logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫")
#
# async def on_shutdown(dp):
#     logging.warning('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...')
#     await bot.delete_webhook()
#     await dp.storage.close()
#     await dp.storage.wait_closed()
#     logging.warning('–í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã')
#
# if __name__ == '__main__':
#     logging.basicConfig(level=logging.INFO)
#     start_webhook(
#         dispatcher=dp,
#         webhook_path=WEBHOOK_PATH,
#         on_startup=on_startup,
#         on_shutdown=on_shutdown,
#         host=WEBAPP_HOST,
#         port=WEBAPP_PORT
#     )

