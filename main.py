import asyncio
import logging
import os
import signal

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

load_dotenv()

bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
cancel_kb = ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
confirm_kb = InlineKeyboardMarkup().row(
    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
)

# –í–æ–ø—Ä–æ—Å—ã
QUESTIONS = [
    "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
    "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã:",
    "–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã (–º¬≤):",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
    "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –º–æ—â–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–±–æ—Ä—ã:",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:"
]


class Form(StatesGroup):
    answers = State()
    confirm = State()


# --- –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ---
BASE_PRICES = {
    1: (10000, 18000),
    2: (18000, 30000),
    3: (30000, 50000),
    4: (50000, None)  # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
}


def calculate_price(data):
    try:
        rooms = int(data['answers'][3])
        area = float(data['answers'][2])

        if rooms >= 4 or area > 100:
            return "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç (–∫–≤–∞—Ä—Ç–∏—Ä–∞ –±–æ–ª–µ–µ 100 –º¬≤ –∏–ª–∏ 4+ –∫–æ–º–Ω–∞—Ç)"

        base_min, base_max = BASE_PRICES.get(rooms, (0, 0))
        base_price = (base_min + base_max) // 2  # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = [
            "üîß *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:*",
            f"- –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ({rooms}-–∫–æ–º–Ω., {area} –º¬≤): {base_price:,} —Ä—É–±.",
            f"üíé *–ò—Ç–æ–≥–æ: ~{base_price:,} —Ä—É–±.*",
            "\n_–£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–π. –¢–æ—á–Ω–∞—è —Å—É–º–º–∞ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¢–ó._"
        ]

        return '\n'.join(report).replace(',', ' ')

    except Exception as e:
        logger.error(f"Calculation error: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ò–Ω–∂–µ–Ω–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π."


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await Form.answers.set()
    await message.answer("üîå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:", reply_markup=cancel_kb)
    await message.answer(QUESTIONS[0])

    async with dp.current_state().proxy() as data:
        data['current_question'] = 0
        data['answers'] = []


@dp.message_handler(state=Form.answers)
async def process_answers(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        current_question = data['current_question']
        answer = message.text

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if current_question == 2 and not answer.replace('.', '').isdigit():
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 45.5)!")
            return
        elif current_question == 3 and not answer.isdigit():
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
            return

        data['answers'].append(answer)

        if current_question < len(QUESTIONS) - 1:
            data['current_question'] += 1
            await message.answer(QUESTIONS[data['current_question']])
        else:
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            price_report = calculate_price(data)
            await Form.confirm.set()
            await message.answer(price_report, parse_mode="Markdown")
            await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?", reply_markup=confirm_kb)


@dp.callback_query_handler(lambda c: c.data in ['confirm_yes', 'confirm_no'], state=Form.confirm)
async def process_confirmation(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'confirm_yes':
        async with state.proxy() as data:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫—É
            report = "üìã *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\n"
            report += f"üë§ {data['answers'][0]} (ID: {callback.from_user.id})\n"
            report += f"üìç –ê–¥—Ä–µ—Å: {data['answers'][1]}\n\n"

            for q, a in zip(QUESTIONS[2:], data['answers'][2:]):
                report += f"*{q}*\n{a}\n\n"

            await bot.send_message(
                chat_id=os.getenv("DESIGNER_CHAT_ID"),
                text=report,
                parse_mode="Markdown"
            )
            await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!")
    else:
        await callback.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await state.finish()

async def on_shutdown(dp):
    await dp.storage.close()
    await dp.storage.wait_closed()
    await bot.close()

if __name__ == '__main__':
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, lambda s, f: asyncio.get_event_loop().create_task(on_shutdown(dp)))
    signal.signal(signal.SIGTERM, lambda s, f: asyncio.get_event_loop().create_task(on_shutdown(dp)))

    executor.start_polling(dp, skip_updates=True)