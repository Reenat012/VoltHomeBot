"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Webhook –¥–ª—è Timeweb
"""
# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import os
import logging
import random
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
WEBHOOK_HOST = 'https://reenat012-volthomebot-2d67.twc1.net'
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = 8000

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==================
REQUEST_COUNTER_FILE = 'request_counter.txt'

# –î–µ–∂—É—Ä–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π, –∫–æ—Ç–æ—Ä–∞—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
WELCOME_PHRASES = [
    "–°–Ω–æ–≤–∞ –∫ –Ω–∞–º? –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É!",
    "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –ì–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É?",
    "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å! –ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ?",
    "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! –ü–æ–µ—Ö–∞–ª–∏!",
    "–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç? –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
new_request_kb = types.ReplyKeyboardMarkup(
    [[types.KeyboardButton("üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")]],
    resize_keyboard=True
)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
project_type_kb = types.ReplyKeyboardMarkup(
    [
        [types.KeyboardButton("üìö –£—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")],
        [types.KeyboardButton("üèóÔ∏è –†–∞–±–æ—á–∏–π –ø—Ä–æ–µ–∫—Ç")]
    ],
    resize_keyboard=True
)

cancel_kb = types.ReplyKeyboardMarkup(
    [[types.KeyboardButton("–û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True
)

confirm_kb = types.InlineKeyboardMarkup().row(
    types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
    types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
)

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
WORK_QUESTIONS = [
    "–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ (–º¬≤):",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–º–µ—â–µ–Ω–∏–π:",
    "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –º–æ—â–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–±–æ—Ä—ã (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–æ—â–Ω–æ—Å—Ç–∏):",
    "–¢–∏–ø –∑–¥–∞–Ω–∏—è (–∂–∏–ª–æ–µ, –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ):",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:"
]

STUDY_QUESTIONS = [
    "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:",
    "–¢—Ä–µ–±—É–µ–º—ã–π –æ–±—ä–µ–º —Ä–∞–±–æ—Ç—ã (—Å—Ç—Ä–∞–Ω–∏—Ü):",
    "–°—Ä–æ–∫ —Å–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞:",
    "–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å):",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:"
]

# –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
WORK_BASE_PRICES = {
    1: (15000, 25000),  # –î–æ 50 –º¬≤
    2: (25000, 40000),  # 50-100 –º¬≤
    3: (40000, 70000),  # 100-200 –º¬≤
    4: (70000, None)     # –°–≤—ã—à–µ 200 –º¬≤
}

STUDY_BASE_PRICES = {
    1: (5000, 10000),    # –î–æ 20 —Å—Ç—Ä–∞–Ω–∏—Ü
    2: (10000, 15000),   # 20-40 —Å—Ç—Ä–∞–Ω–∏—Ü
    3: (15000, None)     # –°–≤—ã—à–µ 40 —Å—Ç—Ä–∞–Ω–∏—Ü
}

class Form(StatesGroup):
    project_type = State()
    answers = State()
    confirm = State()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—á–µ—Ç—á–∏–∫–æ–º –∑–∞—è–≤–æ–∫
def init_request_counter():
    if not os.path.exists(REQUEST_COUNTER_FILE):
        try:
            with open(REQUEST_COUNTER_FILE, 'w') as f:
                f.write('0')
            logging.info("–§–∞–π–ª —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞—è–≤–æ–∫ —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å—á–µ—Ç—á–∏–∫–∞: {e}")
            raise

def get_next_request_number():
    try:
        if not os.path.exists(REQUEST_COUNTER_FILE):
            init_request_counter()
        with open(REQUEST_COUNTER_FILE, 'r+') as f:
            try:
                counter = int(f.read().strip() or 0)
            except ValueError:
                counter = 0
                logging.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ —Å—á–µ—Ç—á–∏–∫–∞, —Å–±—Ä–æ—Å –Ω–∞ 0")
            counter += 1
            f.seek(0)
            f.write(str(counter))
            f.truncate()
            return counter
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º —Å—á–µ—Ç—á–∏–∫–∞: {e}")
        import random
        return random.randint(1000, 9999)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
try:
    init_request_counter()
except Exception as e:
    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫: {e}")

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã
def calculate_work_price(data):
    try:
        area = float(data['answers'][0])
        if area <= 50:
            price_range = WORK_BASE_PRICES[1]
        elif area <= 100:
            price_range = WORK_BASE_PRICES[2]
        elif area <= 200:
            price_range = WORK_BASE_PRICES[3]
        else:
            price_range = WORK_BASE_PRICES[4]
        base_price = (price_range[0] + (price_range[1] or price_range[0]*1.5)) // 2
        report = (
            "üîß *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:*\n"
            f"- –ü–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞: {area} –º¬≤\n"
            f"- –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {base_price:,} —Ä—É–±.\n"
            "\n_–¢–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π._"
        )
        return report.replace(',', ' ')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ò–Ω–∂–µ–Ω–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π."

def calculate_study_price(data):
    try:
        pages = int(data['answers'][1]) if data['answers'][1].isdigit() else 0
        if pages <= 20:
            price_range = STUDY_BASE_PRICES[1]
        elif pages <= 40:
            price_range = STUDY_BASE_PRICES[2]
        else:
            price_range = STUDY_BASE_PRICES[3]
        base_price = (price_range[0] + (price_range[1] or price_range[0]*1.3)) // 2
        report = (
            "üìö *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:*\n"
            f"- –¢–µ–º–∞: {data['answers'][0]}\n"
            f"- –û–±—ä–µ–º: {pages} —Å—Ç—Ä–∞–Ω–∏—Ü\n"
            f"- –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {base_price:,} —Ä—É–±.\n"
            "\n_–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π._"
        )
        return report.replace(',', ' ')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π."

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ==================
@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    await Form.project_type.set()
    await message.answer(
        "üîå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=project_type_kb
    )

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!"
@dp.message_handler(lambda message: message.text == "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")
async def new_request_handler(message: types.Message):
    # –î–ª—è –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–∏ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if random.random() < 0.5 or not hasattr(message, 'request_count'):
        await cmd_start(message)
    else:
        # –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö - —Å–ª—É—á–∞–π–Ω–∞—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞
        welcome_phrase = random.choice(WELCOME_PHRASES)
        await Form.project_type.set()
        await message.answer(welcome_phrase, reply_markup=project_type_kb)

@dp.message_handler(state=Form.project_type)
async def process_project_type(message: types.Message, state: FSMContext):
    if message.text not in ["üìö –£—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç", "üèóÔ∏è –†–∞–±–æ—á–∏–π –ø—Ä–æ–µ–∫—Ç"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    async with state.proxy() as data:
        data['project_type'] = "study" if message.text == "üìö –£—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç" else "work"
        data['questions'] = STUDY_QUESTIONS if data['project_type'] == "study" else WORK_QUESTIONS
        data['current_question'] = 0
        data['answers'] = []

    await Form.next()
    await message.answer(data['questions'][0], reply_markup=cancel_kb)

@dp.message_handler(state=Form.answers)
async def process_answers(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        current_question = data['current_question']
        answer = message.text

        if data['project_type'] == "work":
            if current_question == 0 and not answer.replace('.', '').isdigit():
                await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ø–ª–æ—â–∞–¥–∏ –æ–±—ä–µ–∫—Ç–∞!")
                return
            elif current_question == 1 and not answer.isdigit():
                await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–º–µ—â–µ–Ω–∏–π!")
                return

        elif data['project_type'] == "study":
            if current_question == 1 and not answer.isdigit():
                await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ–±—ä–µ–º–∞ —Ä–∞–±–æ—Ç—ã!")
                return

        data['answers'].append(answer)

        if current_question < len(data['questions']) - 1:
            data['current_question'] += 1
            await message.answer(data['questions'][data['current_question']], reply_markup=cancel_kb)
        else:
            if data['project_type'] == "work":
                data['price_report'] = calculate_work_price(data)
            else:
                data['price_report'] = calculate_study_price(data)

            await Form.confirm.set()
            await message.answer(data['price_report'], parse_mode="Markdown")
            await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É?", reply_markup=confirm_kb)

@dp.callback_query_handler(lambda c: c.data in ['confirm_yes', 'confirm_no'], state=Form.confirm)
async def process_confirmation(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'confirm_yes':
        async with state.proxy() as data:
            try:
                request_number = get_next_request_number()
                username = f"@{callback.from_user.username}" if callback.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
                contact_button = types.InlineKeyboardMarkup()
                contact_button.add(types.InlineKeyboardButton(
                    text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    url=f"tg://user?id={callback.from_user.id}"
                ))
                project_type = "–£—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç" if data['project_type'] == "study" else "–†–∞–±–æ—á–∏–π –ø—Ä–æ–µ–∫—Ç"
                report = (
                    f"üìã *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ ‚Ññ{request_number}* ({project_type})\n"
                    f"üÜî ID: `{callback.from_user.id}`\n"
                    f"üìß Username: {username}\n"
                )
                if data['project_type'] == "work":
                    report += (
                        f"üìè *–ü–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞:* {data['answers'][0]} –º¬≤\n"
                        f"üö™ *–ü–æ–º–µ—â–µ–Ω–∏–π:* {data['answers'][1]}\n"
                        f"üîå *–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–±–æ—Ä—ã:* {data['answers'][2]}\n"
                        f"üè¢ *–¢–∏–ø –∑–¥–∞–Ω–∏—è:* {data['answers'][3]}\n"
                        f"üìù *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:* {data['answers'][4]}\n"
                        f"üíµ *–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:\n{data['price_report']}"
                    )
                else:
                    report += (
                        f"üìñ *–¢–µ–º–∞ –ø—Ä–æ–µ–∫—Ç–∞:* {data['answers'][0]}\n"
                        f"üìÑ *–û–±—ä–µ–º —Ä–∞–±–æ—Ç—ã:* {data['answers'][1]} —Å—Ç—Ä.\n"
                        f"‚è≥ *–°—Ä–æ–∫ —Å–¥–∞—á–∏:* {data['answers'][2]}\n"
                        f"üìö *–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:* {data['answers'][3]}\n"
                        f"üí° *–ü–æ–∂–µ–ª–∞–Ω–∏—è:* {data['answers'][4]}\n"
                        f"üíµ *–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:\n{data['price_report']}"
                    )
                await bot.send_message(
                    chat_id=os.getenv("DESIGNER_CHAT_ID"),
                    text=report,
                    parse_mode="Markdown",
                    reply_markup=contact_button
                )
                await callback.message.answer(
                    f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∞ ‚Ññ{request_number}. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!",
                    reply_markup=new_request_kb
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")
                await callback.message.answer(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=new_request_kb
                )
    else:
        await callback.message.answer(
            "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=new_request_kb
        )
    await state.finish()

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def on_startup(dp):
    try:
        await bot.set_webhook(WEBHOOK_URL)
        logging.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        exit(1)

async def on_shutdown(dp):
    logging.warning('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...')
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()
    logging.warning('–í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã')

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT
    )