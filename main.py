import os
import logging
import random
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
DATA_PATH = os.getenv("DATA_PATH", "/tmp")
REQUEST_COUNTER_FILE = f'{DATA_PATH}/request_counter.txt'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
WEBHOOK_HOST = 'https://reenat012-volthomebot-2d67.twc1.net'
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = 8000

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
bot = Bot(
    token=os.getenv("BOT_TOKEN"),
    timeout=15,
    parse_mode="Markdown"
)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Redis –≤–º–µ—Å—Ç–æ MemoryStorage
storage = RedisStorage2(
    host=os.getenv("REDIS_HOST", "localhost"),
    port=os.getenv("REDIS_PORT", 6379),
    db=os.getenv("REDIS_DB", 0),
    password=os.getenv("REDIS_PASSWORD")
)
dp = Dispatcher(bot, storage=storage)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis
async def check_redis_connection():
    try:
        await storage.redis.ping()
        logging.info("‚úÖ Redis connection successful")
    except Exception as e:
        logging.error(f"‚ùå Redis connection error: {e}")


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WELCOME_PHRASES = [
    "–°–Ω–æ–≤–∞ –∫ –Ω–∞–º? –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É!",
    "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
    "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! –ü–æ–µ—Ö–∞–ª–∏!"
]

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
counter_lock = asyncio.Lock()


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_project_type_kb():
    return types.ReplyKeyboardMarkup(
        [
            [types.KeyboardButton("üìö –£—á–µ–±–Ω—ã–π –≤–æ–ø—Ä–æ—Å")],
            [types.KeyboardButton("üèóÔ∏è –†–∞–±–æ—á–∏–π –≤–æ–ø—Ä–æ—Å")]
        ],
        resize_keyboard=True
    )


def get_cancel_request_kb():
    return types.ReplyKeyboardMarkup(
        [[types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏")]],
        resize_keyboard=True
    )


def get_new_request_kb():
    return types.ReplyKeyboardMarkup(
        [[types.KeyboardButton("üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")]],
        resize_keyboard=True
    )


def get_building_type_kb():
    return types.ReplyKeyboardMarkup(
        [
            [types.KeyboardButton("–ñ–∏–ª–æ–µ"), types.KeyboardButton("–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ")],
            [types.KeyboardButton("–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ"), types.KeyboardButton("–î—Ä—É–≥–æ–µ")],
            [types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏")]
        ],
        resize_keyboard=True
    )


def get_confirm_kb():
    return types.InlineKeyboardMarkup().row(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
    )


# –í–æ–ø—Ä–æ—Å—ã
WORK_QUESTIONS = [
    "–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ (–º¬≤):",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–º–µ—â–µ–Ω–∏–π:",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:"
]

STUDY_QUESTIONS = [
    "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:",
    "–¢—Ä–µ–±—É–µ–º—ã–π –æ–±—ä–µ–º —Ä–∞–±–æ—Ç—ã (—Å—Ç—Ä–∞–Ω–∏—Ü):",
    "–°—Ä–æ–∫ —Å–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞:",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:"
]


class Form(StatesGroup):
    project_type = State()
    answers = State()
    building_type = State()
    custom_building = State()
    confirm = State()


# –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω
WORK_BASE_PRICES = {
    1: (15000, 25000),  # –î–æ 50 –º¬≤
    2: (25000, 40000),  # 50-100 –º¬≤
    3: (40000, 70000),  # 100-200 –º¬≤
    4: (70000, None)  # –°–≤—ã—à–µ 200 –º¬≤
}

STUDY_BASE_PRICES = {
    1: (5000, 10000),  # –î–æ 20 —Å—Ç—Ä–∞–Ω–∏—Ü
    2: (10000, 15000),  # 20-40 —Å—Ç—Ä–∞–Ω–∏—Ü
    3: (15000, None)  # –°–≤—ã—à–µ 40 —Å—Ç—Ä–∞–Ω–∏—Ü
}


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º —Å—á–µ—Ç—á–∏–∫–∞
async def init_request_counter():
    try:
        async with counter_lock:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(DATA_PATH, exist_ok=True)

            if not os.path.exists(REQUEST_COUNTER_FILE):
                with open(REQUEST_COUNTER_FILE, 'w') as f:
                    f.write('0')
                logging.info("–°—á–µ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: {e}")
        return False
    return True


async def get_next_request_number():
    async with counter_lock:
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            if not os.path.exists(REQUEST_COUNTER_FILE):
                await init_request_counter()

            with open(REQUEST_COUNTER_FILE, 'r+') as f:
                content = f.read().strip()
                counter = int(content) if content.isdigit() else 0
                counter += 1
                f.seek(0)
                f.write(str(counter))
                f.truncate()
                return counter
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞: {e}")
            return random.randint(1000, 9999)


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
async def calculate_work_price(data):
    try:
        area = float(data['answers'][0])
        building = data['answers'][2]

        complexity = {
            "–ñ–∏–ª–æ–µ": 1.0,
            "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ": 1.3,
            "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ": 1.5
        }.get(building.split()[0], 1.2)

        if area <= 50:
            price_range = WORK_BASE_PRICES[1]
        elif area <= 100:
            price_range = WORK_BASE_PRICES[2]
        elif area <= 200:
            price_range = WORK_BASE_PRICES[3]
        else:
            price_range = WORK_BASE_PRICES[4]

        base_price = (price_range[0] + (price_range[1] or price_range[0] * 1.5)) // 2
        total = int(base_price * complexity)

        report = [
            "üîß *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:*",
            f"- –ü–ª–æ—â–∞–¥—å: {area} –º¬≤ | –¢–∏–ø: {building}",
            f"- –°—Ç–æ–∏–º–æ—Å—Ç—å: {total:,} —Ä—É–±.",
            "\n_–¢–æ—á–Ω–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π_"
        ]
        return '\n'.join(report).replace(',', ' ')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."


async def calculate_study_price(data):
    try:
        pages = int(data['answers'][1])
        if pages <= 20:
            price = STUDY_BASE_PRICES[1][0]
        elif pages <= 40:
            price = (STUDY_BASE_PRICES[2][0] + STUDY_BASE_PRICES[2][1]) // 2
        else:
            price = STUDY_BASE_PRICES[3][0] * 1.2

        report = [
            "üìö *–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:*",
            f"- –¢–µ–º–∞: {data['answers'][0]}",
            f"- –û–±—ä–µ–º: {pages} —Å—Ç—Ä. ‚Üí {price:,} —Ä—É–±.",
            "\n_–¶–µ–Ω–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π_"
        ]
        return '\n'.join(report).replace(',', ' ')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏", state='*')
async def cancel_request(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_new_request_kb())


@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    await Form.project_type.set()
    await message.answer(
        "üîå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=get_project_type_kb()
    )


@dp.message_handler(lambda m: m.text == "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")
async def new_request(message: types.Message):
    await Form.project_type.set()
    await message.answer(random.choice(WELCOME_PHRASES), reply_markup=get_project_type_kb())


@dp.message_handler(state=Form.project_type)
async def process_type(message: types.Message, state: FSMContext):
    valid_options = ["üìö –£—á–µ–±–Ω—ã–π –≤–æ–ø—Ä–æ—Å", "üèóÔ∏è –†–∞–±–æ—á–∏–π –≤–æ–ø—Ä–æ—Å"]
    if message.text not in valid_options:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    async with state.proxy() as data:
        data['project_type'] = "study" if "–£—á–µ–±–Ω—ã–π" in message.text else "work"
        data['questions'] = STUDY_QUESTIONS if data['project_type'] == "study" else WORK_QUESTIONS
        data['current_question'] = 0
        data['answers'] = []

    await Form.answers.set()
    await message.answer(data['questions'][0], reply_markup=get_cancel_request_kb())


@dp.message_handler(state=Form.answers)
async def process_answers(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        current = data['current_question']
        answer = message.text

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
        if data['project_type'] == "work":
            if current == 0 and not answer.replace('.', '', 1).isdigit():
                await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ø–ª–æ—â–∞–¥–∏!", reply_markup=get_cancel_request_kb())
                return
            if current == 1 and not answer.isdigit():
                await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø–æ–º–µ—â–µ–Ω–∏–π!", reply_markup=get_cancel_request_kb())
                return

        if data['project_type'] == "study" and current == 1 and not answer.isdigit():
            await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü!", reply_markup=get_cancel_request_kb())
            return

        data['answers'].append(answer)

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–¥–∞–Ω–∏—è
        if data['project_type'] == "work" and current == 1:
            await Form.building_type.set()
            await message.answer("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–¥–∞–Ω–∏—è:", reply_markup=get_building_type_kb())
            return

        if current < len(data['questions']) - 1:
            data['current_question'] += 1
            await message.answer(data['questions'][data['current_question']], reply_markup=get_cancel_request_kb())
        else:
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            if data['project_type'] == "work":
                data['price_report'] = await calculate_work_price(data)
            else:
                data['price_report'] = await calculate_study_price(data)

            await Form.confirm.set()
            await message.answer(data['price_report'])
            await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É?", reply_markup=get_confirm_kb())


@dp.message_handler(state=Form.building_type)
async def process_building(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == "–î—Ä—É–≥–æ–µ":
            await Form.custom_building.set()
            await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–∏–ø–∞ –∑–¥–∞–Ω–∏—è:", reply_markup=get_cancel_request_kb())
        else:
            data['answers'].append(message.text)
            await Form.answers.set()
            data['current_question'] += 1
            await message.answer(data['questions'][data['current_question']], reply_markup=get_cancel_request_kb())


@dp.message_handler(state=Form.custom_building)
async def process_custom_building(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['answers'].append(f"–î—Ä—É–≥–æ–µ ({message.text})")
        await Form.answers.set()
        data['current_question'] += 1
        await message.answer(data['questions'][data['current_question']], reply_markup=get_cancel_request_kb())


@dp.callback_query_handler(lambda c: c.data in ['confirm_yes', 'confirm_no'], state=Form.confirm)
async def confirm(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'confirm_yes':
        async with state.proxy() as data:
            try:
                req_num = await get_next_request_number()
                username = f"@{callback.from_user.username}" if callback.from_user.username else "N/A"

                report = f"üìã *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ ‚Ññ{req_num}*\n–¢–∏–ø: {'–£—á–µ–±–Ω—ã–π' if data['project_type'] == 'study' else '–†–∞–±–æ—á–∏–π'}\n"
                report += f"üÜî {callback.from_user.id} | üìß {username}\n\n"

                if data['project_type'] == "work":
                    report += (
                        f"üè¢ –¢–∏–ø –∑–¥–∞–Ω–∏—è: {data['answers'][2]}\n"
                        f"üìè –ü–ª–æ—â–∞–¥—å: {data['answers'][0]} –º¬≤\n"
                        f"üö™ –ü–æ–º–µ—â–µ–Ω–∏–π: {data['answers'][1]}\n"
                        f"üíº –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {data['answers'][3]}\n\n"
                        f"{data['price_report']}"
                    )
                else:
                    report += (
                        f"üìñ –¢–µ–º–∞: {data['answers'][0]}\n"
                        f"üìÑ –û–±—ä–µ–º: {data['answers'][1]} —Å—Ç—Ä.\n"
                        f"‚è≥ –°—Ä–æ–∫: {data['answers'][2]}\n"
                        f"üí° –ü–æ–∂–µ–ª–∞–Ω–∏—è: {data['answers'][3]}\n\n"
                        f"{data['price_report']}"
                    )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è DESIGNER_CHAT_ID
                designer_chat_id = os.getenv("DESIGNER_CHAT_ID")
                if not designer_chat_id:
                    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω DESIGNER_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

                await bot.send_message(
                    chat_id=designer_chat_id,
                    text=report,
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton(
                            "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å",
                            url=f"tg://user?id={callback.from_user.id}"
                        )
                    ),
                    timeout=5
                )

                await callback.message.answer(
                    f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ ‚Ññ{req_num}. \n–û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.",
                    reply_markup=get_new_request_kb()
                )

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {str(e)}", exc_info=True)
                await callback.message.answer(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_new_request_kb()
                )
    else:
        await callback.message.answer(
            "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_new_request_kb()
        )
    await state.finish()


# –í–µ–±—Ö—É–∫
async def on_startup(dp):
    await check_redis_connection()
    await init_request_counter()
    await bot.set_webhook(WEBHOOK_URL, max_connections=40)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


async def on_shutdown(dp):
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()
    logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )

    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
        skip_updates=True
    )