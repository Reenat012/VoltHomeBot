"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Webhook –¥–ª—è Timeweb
"""

import os
import logging
import random
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
WEBHOOK_HOST = 'https://reenat012-volthomebot-2d67.twc1.net'
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = 8000

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
REQUEST_COUNTER_FILE = 'request_counter.txt'
WELCOME_PHRASES = [
    "–°–Ω–æ–≤–∞ –∫ –Ω–∞–º? –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É!",
    "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
    "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! –ü–æ–µ—Ö–∞–ª–∏!",
    "–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç? –í–ø–µ—Ä–µ–¥!"
]

# –¢–∏–ø–æ–≤—ã–µ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–±–æ—Ä—ã
APPLIANCES = [
    ("–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ (2.5 –∫–í—Ç)", 2500),
    ("–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞ (2 –∫–í—Ç)", 2000),
    ("–≠–ª–µ–∫—Ç—Ä–æ–ø–ª–∏—Ç–∞ (7 –∫–í—Ç)", 7000),
    ("–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä (3.5 –∫–í—Ç)", 3500),
    ("–ë–æ–π–ª–µ—Ä (5 –∫–í—Ç)", 5000),
    ("–î—É—Ö–æ–≤–æ–π —à–∫–∞—Ñ (4 –∫–í—Ç)", 4000)
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
project_type_kb = types.ReplyKeyboardMarkup(
    [
        [types.KeyboardButton("üìö –£—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")],
        [types.KeyboardButton("üèóÔ∏è –†–∞–±–æ—á–∏–π –ø—Ä–æ–µ–∫—Ç")]
    ],
    resize_keyboard=True
)

cancel_kb = types.ReplyKeyboardMarkup(
    [[types.KeyboardButton("–û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True
)

new_request_kb = types.ReplyKeyboardMarkup(
    [[types.KeyboardButton("üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")]],
    resize_keyboard=True
)

building_type_kb = types.ReplyKeyboardMarkup(
    [
        [types.KeyboardButton("–ñ–∏–ª–æ–µ"), types.KeyboardButton("–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ")],
        [types.KeyboardButton("–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ"), types.KeyboardButton("–î—Ä—É–≥–æ–µ")]
    ],
    resize_keyboard=True
)

def appliances_keyboard():
    kb = types.InlineKeyboardMarkup()
    for appliance, _ in APPLIANCES:
        kb.add(types.InlineKeyboardButton(
            text=appliance,
            callback_data=f"appliance_{appliance}"
        ))
    kb.row(
        types.InlineKeyboardButton("‚úèÔ∏è –°–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="custom_appliance"),
        types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_appliances")
    )
    return kb

# –í–æ–ø—Ä–æ—Å—ã
WORK_QUESTIONS = [
    "–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ (–º¬≤):",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–º–µ—â–µ–Ω–∏–π:",
    "–¢–∏–ø –∑–¥–∞–Ω–∏—è:",
    "–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–µ–∫—Ç—É:"
]

STUDY_QUESTIONS = [
    "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:",
    "–¢—Ä–µ–±—É–µ–º—ã–π –æ–±—ä–µ–º —Ä–∞–±–æ—Ç—ã (—Å—Ç—Ä–∞–Ω–∏—Ü):",
    "–°—Ä–æ–∫ —Å–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞:",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:"
]

class Form(StatesGroup):
    project_type = State()
    answers = State()
    appliances = State()
    building_type = State()
    custom_building = State()
    confirm = State()

# –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω
WORK_BASE_PRICES = {
    1: (15000, 25000),  # –î–æ 50 –º¬≤
    2: (25000, 40000),  # 50-100 –º¬≤
    3: (40000, 70000),  # 100-200 –º¬≤
    4: (70000, None)    # –°–≤—ã—à–µ 200 –º¬≤
}

STUDY_BASE_PRICES = {
    1: (5000, 10000),   # –î–æ 20 —Å—Ç—Ä–∞–Ω–∏—Ü
    2: (10000, 15000),  # 20-40 —Å—Ç—Ä–∞–Ω–∏—Ü
    3: (15000, None)    # –°–≤—ã—à–µ 40 —Å—Ç—Ä–∞–Ω–∏—Ü
}

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º —Å—á–µ—Ç—á–∏–∫–∞
def init_request_counter():
    if not os.path.exists(REQUEST_COUNTER_FILE):
        try:
            with open(REQUEST_COUNTER_FILE, 'w') as f:
                f.write('0')
            logging.info("–°—á–µ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: {e}")

def get_next_request_number():
    try:
        if not os.path.exists(REQUEST_COUNTER_FILE):
            init_request_counter()

        with open(REQUEST_COUNTER_FILE, 'r+') as f:
            try:
                counter = int(f.read().strip() or 0)
            except ValueError:
                counter = 0
                logging.warning("–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞—è–≤–æ–∫")

            counter += 1
            f.seek(0)
            f.write(str(counter))
            return counter
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞: {e}")
        return random.randint(1000, 9999)

# –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
def calculate_work_price(data):
    try:
        area = float(data['answers'][0])
        building = data['answers'][2]

        complexity = {
            "–ñ–∏–ª–æ–µ": 1.0,
            "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ": 1.3,
            "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ": 1.5
        }.get(building.split()[0], 1.2)  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è "–î—Ä—É–≥–æ–µ"

        if area <= 50:
            price_range = WORK_BASE_PRICES[1]
        elif area <= 100:
            price_range = WORK_BASE_PRICES[2]
        elif area <= 200:
            price_range = WORK_BASE_PRICES[3]
        else:
            price_range = WORK_BASE_PRICES[4]

        base_price = (price_range[0] + (price_range[1] or price_range[0]*1.5)) // 2
        total = int(base_price * complexity)

        report = [
            "üîß *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:*",
            f"- –ü–ª–æ—â–∞–¥—å: {area} –º¬≤ | –¢–∏–ø: {building}",
            f"- –°—Ç–æ–∏–º–æ—Å—Ç—å: {total:,} —Ä—É–±.",
            "\n_–¢–æ—á–Ω–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π_"
        ]
        return '\n'.join(report).replace(',', ' ')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."

def calculate_study_price(data):
    try:
        pages = int(data['answers'][1])
        if pages <= 20:
            price = STUDY_BASE_PRICES[1][0]
        elif pages <= 40:
            price = (STUDY_BASE_PRICES[2][0] + STUDY_BASE_PRICES[2][1]) // 2
        else:
            price = STUDY_BASE_PRICES[3][0] * 1.2

        report = [
            "üìö *–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:*",
            f"- –¢–µ–º–∞: {data['answers'][0]}",
            f"- –û–±—ä–µ–º: {pages} —Å—Ç—Ä. ‚Üí {price:,} —Ä—É–±.",
            "\n_–¶–µ–Ω–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π_"
        ]
        return '\n'.join(report).replace(',', ' ')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    await Form.project_type.set()
    await message.answer(
        "üîå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=project_type_kb
    )

@dp.message_handler(lambda m: m.text == "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")
async def new_request(message: types.Message):
    if random.random() < 0.3:
        await cmd_start(message)
    else:
        await Form.project_type.set()
        await message.answer(random.choice(WELCOME_PHRASES), reply_markup=project_type_kb)

@dp.message_handler(state=Form.project_type)
async def process_type(message: types.Message, state: FSMContext):
    if message.text not in ["üìö –£—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç", "üèóÔ∏è –†–∞–±–æ—á–∏–π –ø—Ä–æ–µ–∫—Ç"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    async with state.proxy() as data:
        data['project_type'] = "study" if "–£—á–µ–±–Ω—ã–π" in message.text else "work"
        data['questions'] = STUDY_QUESTIONS if data['project_type'] == "study" else WORK_QUESTIONS
        data['current_question'] = 0
        data['answers'] = []
        data['appliances'] = []

    await Form.answers.set()
    await message.answer(data['questions'][0], reply_markup=cancel_kb)

@dp.message_handler(state=Form.answers)
async def process_answers(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        current = data['current_question']
        answer = message.text

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        if data['project_type'] == "work":
            if current == 0 and not answer.replace('.', '').isdigit():
                await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ø–ª–æ—â–∞–¥–∏!")
                return
            if current == 1 and not answer.isdigit():
                await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø–æ–º–µ—â–µ–Ω–∏–π!")
                return
            if current == 2:
                await Form.building_type.set()
                await message.answer("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–¥–∞–Ω–∏—è:", reply_markup=building_type_kb)
                return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —É—á–µ–±–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        if data['project_type'] == "study" and current == 1 and not answer.isdigit():
            await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü!")
            return

        data['answers'].append(answer)

        if current < len(data['questions']) - 1:
            data['current_question'] += 1
            next_q = data['questions'][data['current_question']]

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–±–æ—Ä–æ–≤
            if data['project_type'] == "work" and data['current_question'] == 2:
                await Form.appliances.set()
                await message.answer("‚ö° –î–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–±–æ—Ä—ã:", reply_markup=appliances_keyboard())
            else:
                await message.answer(next_q)
        else:
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            if data['project_type'] == "work":
                data['price_report'] = calculate_work_price(data)
            else:
                data['price_report'] = calculate_study_price(data)

            await Form.confirm.set()
            await message.answer(data['price_report'], parse_mode="Markdown")
            await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É?", reply_markup=confirm_kb)

@dp.message_handler(state=Form.building_type)
async def process_building(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == "–î—Ä—É–≥–æ–µ":
            await Form.custom_building.set()
            await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–∏–ø–∞ –∑–¥–∞–Ω–∏—è:", reply_markup=cancel_kb)
        else:
            data['answers'].append(message.text)
            await Form.answers.set()
            await process_answers(message, state)

@dp.message_handler(state=Form.custom_building)
async def process_custom_building(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['answers'].append(f"–î—Ä—É–≥–æ–µ ({message.text})")
        await Form.answers.set()
        await process_answers(message, state)

@dp.callback_query_handler(lambda c: c.data.startswith('appliance_'), state=Form.appliances)
async def add_appliance(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        appliance = callback.data.split('_', 1)[1]
        data['appliances'].append(appliance)
        await callback.message.edit_reply_markup(appliances_keyboard())

@dp.callback_query_handler(lambda c: c.data == 'custom_appliance', state=Form.appliances)
async def request_custom_appliance(callback: types.CallbackQuery):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –º–æ—â–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ß–∞–π–Ω–∏–∫ 1.8 –∫–í—Ç):")

@dp.message_handler(state=Form.appliances)
async def save_custom_appliance(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['appliances'].append(message.text)
        await message.answer("‚ö° –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ:", reply_markup=appliances_keyboard())

@dp.callback_query_handler(lambda c: c.data == 'finish_appliances', state=Form.appliances)
async def finish_appliances(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['answers'].append('\n'.join(data['appliances']))
        await Form.answers.set()
        await callback.message.answer(data['questions'][3])

@dp.callback_query_handler(lambda c: c.data in ['confirm_yes', 'confirm_no'], state=Form.confirm)
async def confirm(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'confirm_yes':
        async with state.proxy() as data:
            try:
                req_num = get_next_request_number()
                username = f"@{callback.from_user.username}" if callback.from_user.username else "N/A"

                report = f"üìã *–ó–∞—è–≤–∫–∞ ‚Ññ{req_num}*\n"
                report += f"üÜî {callback.from_user.id} | üìß {username}\n"

                if data['project_type'] == "work":
                    report += (
                        f"üè¢ {data['answers'][2]}\n"
                        f"üìè {data['answers'][0]} –º¬≤ | üö™ {data['answers'][1]} –ø–æ–º–µ—â.\n"
                        f"‚ö° –ü—Ä–∏–±–æ—Ä—ã:\n{data['answers'][3]}\n"
                        f"üíº –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {data['answers'][4]}\n"
                        f"üíµ {data['price_report']}"
                    )
                else:
                    report += (
                        f"üìñ {data['answers'][0]}\n"
                        f"üìÑ {data['answers'][1]} —Å—Ç—Ä. | ‚è≥ {data['answers'][2]}\n"
                        f"üí° –ü–æ–∂–µ–ª–∞–Ω–∏—è: {data['answers'][3]}\n"
                        f"üíµ {data['price_report']}"
                    )

                await bot.send_message(
                    os.getenv("DESIGNER_CHAT_ID"),
                    report,
                    parse_mode="Markdown",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton(
                            "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å",
                            url=f"tg://user?id={callback.from_user.id}"
                        )
                    )
                )
                await callback.message.answer(
                    f"‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ{req_num} –ø—Ä–∏–Ω—è—Ç–∞!\n–û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.",
                    reply_markup=new_request_kb
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞—è–≤–∫–∏: {e}")
                await callback.message.answer(
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=new_request_kb
                )
    else:
        await callback.message.answer(
            "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=new_request_kb
        )
    await state.finish()

# –í–µ–±—Ö—É–∫
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown(dp):
    await bot.delete_webhook()
    await dp.storage.close()
    logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    init_request_counter()
    logging.basicConfig(level=logging.INFO)
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT
    )