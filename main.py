import os
import logging
import random
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST', 'https://reenat012-volthomebot-2d67.twc1.net')
WEBHOOK_PATH = os.getenv('WEBHOOK_PATH', '/webhook')
WEBAPP_HOST = os.getenv('WEBAPP_HOST', '0.0.0.0')
WEBAPP_PORT = int(os.getenv('WEBAPP_PORT', 8000))
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
REQUEST_COUNTER_FILE = 'request_counter.txt'
SPECIALIST_CHAT_ID = os.getenv("SPECIALIST_CHAT_ID")


class Form(StatesGroup):
    request_type = State()
    answers = State()
    confirm = State()


# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã
TEXTS = {
    'welcome': [
        "–°–Ω–æ–≤–∞ –∫ –Ω–∞–º? –û—Ç–ª–∏—á–Ω–æ! –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - –Ω–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è!",
        "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –ß–µ–º –ø–æ–º–æ–∂–µ–º —Å–µ–≥–æ–¥–Ω—è?",
        "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å - –ø—É—Ç—å –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ä–µ—à–µ–Ω–∏—é!"
    ],
    'errors': {
        'counter': "–û—à–∏–±–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞: {}",
        'calculation': "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {}",
        'send': "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {}"
    },
    'price_templates': {
        'study': [
            "üìö *–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–µ–±–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:*",
            "- –°—Ç—Ä–∞–Ω–∏—Ü: {pages} √ó {base}‚ÇΩ = {base_total}‚ÇΩ",
            "- –°—Ä–æ—á–Ω–æ—Å—Ç—å ({urgency}): √ó{urgency_coeff}",
            "‚ûî *–ò—Ç–æ–≥–æ: {total}‚ÇΩ*",
            "\n_–¶–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —Å–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º_"
        ],
        'work': [
            "üèóÔ∏è *–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:*",
            "- –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {base}‚ÇΩ",
            "- –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ ({object_type}): √ó{object_coeff}",
            "- –°—Ä–æ—á–Ω–æ—Å—Ç—å ({urgency}): √ó{urgency_coeff}",
            "‚ûî *–ò—Ç–æ–≥–æ: {total}‚ÇΩ*",
            "\n_–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞_"
        ]
    }
}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(buttons, row_width=2):
    return types.ReplyKeyboardMarkup(
        [[types.KeyboardButton(btn) for btn in row] for row in buttons],
        resize_keyboard=True
    )


KEYBOARDS = {
    'request_type': create_keyboard([["üìö –£—á–µ–±–Ω—ã–π –≤–æ–ø—Ä–æ—Å", "üèóÔ∏è –†–∞–±–æ—á–∏–π –≤–æ–ø—Ä–æ—Å"]]),
    'cancel': create_keyboard([["–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞"]]),
    'new_request': create_keyboard([["üìù –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!"]]),
    'urgency': create_keyboard([
        ["–°—Ä–æ—á–Ω–æ (24—á)", "3-5 –¥–Ω–µ–π"],
        ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (7 –¥–Ω–µ–π)", "–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞"]
    ]),
    'object_type': create_keyboard([
        ["–ñ–∏–ª–æ–π –¥–æ–º", "–ö–≤–∞—Ä—Ç–∏—Ä–∞"],
        ["–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ", "–î—Ä—É–≥–æ–µ"],
        ["–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞"]
    ])
}

# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_kb = types.InlineKeyboardMarkup().row(
    types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
    types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
)

# –í–æ–ø—Ä–æ—Å—ã
QUESTIONS = {
    'study': [
        "üìù –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —É—á–µ–±–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
        "üìÑ –¢—Ä–µ–±—É–µ–º—ã–π –æ–±—ä–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü):",
        "‚è≥ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        "üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:"
    ],
    'work': [
        "üíº –û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–∞–±–æ—á–∏–π –≤–æ–ø—Ä–æ—Å/–ø—Ä–æ–±–ª–µ–º—É:",
        "üè≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:",
        "üö® –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è:",
        "üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:"
    ]
}

# –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
PRICES = {
    'study': {
        'base': 800,
        'urgency': {
            "–°—Ä–æ—á–Ω–æ (24—á)": 1.8,
            "3-5 –¥–Ω–µ–π": 1.3,
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (7 –¥–Ω–µ–π)": 1.0
        }
    },
    'work': {
        'base': 1500,
        'object_type': {
            "–ñ–∏–ª–æ–π –¥–æ–º": 1.0,
            "–ö–≤–∞—Ä—Ç–∏—Ä–∞": 0.9,
            "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ": 1.2,
            "–î—Ä—É–≥–æ–µ": 1.1
        },
        'urgency': {
            "–°—Ä–æ—á–Ω–æ (24—á)": 2.0,
            "3-5 –¥–Ω–µ–π": 1.5,
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (7 –¥–Ω–µ–π)": 1.0
        }
    }
}


def init_request_counter():
    try:
        if not os.path.exists(REQUEST_COUNTER_FILE):
            with open(REQUEST_COUNTER_FILE, 'w') as f:
                f.write('0')
            logging.info("–°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logging.error(TEXTS['errors']['counter'].format(e))


def get_next_request_number():
    try:
        with open(REQUEST_COUNTER_FILE, 'r+') as f:
            counter = int(f.read().strip() or 0)
            counter += 1
            f.seek(0)
            f.write(str(counter))
            return counter
    except Exception as e:
        logging.error(TEXTS['errors']['counter'].format(e))
        return random.randint(1000, 9999)


async def generate_price_report(request_type, data):
    try:
        params = PRICES[request_type]
        answers = data['answers']

        if request_type == 'study':
            pages = int(answers[1])
            urgency = answers[2]
            base_total = params['base'] * pages
            total = base_total * params['urgency'].get(urgency, 1.0)

            return '\n'.join(TEXTS['price_templates']['study']).format(
                pages=pages,
                base=params['base'],
                base_total=base_total,
                urgency=urgency,
                urgency_coeff=params['urgency'].get(urgency, 1.0),
                total=int(total)
            )
        else:
            object_type = answers[1]
            urgency = answers[2]
            object_coeff = params['object_type'].get(object_type, 1.0)
            urgency_coeff = params['urgency'].get(urgency, 1.0)
            total = params['base'] * object_coeff * urgency_coeff

            return '\n'.join(TEXTS['price_templates']['work']).format(
                base=params['base'],
                object_type=object_type,
                object_coeff=object_coeff,
                urgency=urgency,
                urgency_coeff=urgency_coeff,
                total=int(total)
            )
    except Exception as e:
        logging.error(TEXTS['errors']['calculation'].format(e))
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."


@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞", state='*')
async def cancel_request(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=KEYBOARDS['new_request'])


@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    await Form.request_type.set()
    await message.answer(
        "üë®üíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞:",
        reply_markup=KEYBOARDS['request_type']
    )


@dp.message_handler(lambda m: m.text == "üìù –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!")
async def new_request(message: types.Message):
    await Form.request_type.set()
    await message.answer(random.choice(TEXTS['welcome']), reply_markup=KEYBOARDS['request_type'])


@dp.message_handler(state=Form.request_type)
async def process_type(message: types.Message, state: FSMContext):
    if message.text not in ["üìö –£—á–µ–±–Ω—ã–π –≤–æ–ø—Ä–æ—Å", "üèóÔ∏è –†–∞–±–æ—á–∏–π –≤–æ–ø—Ä–æ—Å"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    async with state.proxy() as data:
        request_type = 'study' if "–£—á–µ–±–Ω—ã–π" in message.text else 'work'
        data.update({
            'request_type': request_type,
            'questions': QUESTIONS[request_type],
            'current_question': 0,
            'answers': []
        })

    await Form.answers.set()
    await message.answer(data['questions'][0], reply_markup=KEYBOARDS['cancel'])


@dp.message_handler(state=Form.answers)
async def process_answers(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        current = data['current_question']
        answer = message.text
        request_type = data['request_type']
        questions = data['questions']

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
        if current == 1 and request_type == 'study' and not answer.isdigit():
            await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü!", reply_markup=KEYBOARDS['cancel'])
            return

        if current == 2 and answer not in ["–°—Ä–æ—á–Ω–æ (24—á)", "3-5 –¥–Ω–µ–π", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (7 –¥–Ω–µ–π)"]:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:", reply_markup=KEYBOARDS['urgency'])
            return

        if current == 1 and request_type == 'work' and answer not in PRICES['work']['object_type']:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:", reply_markup=KEYBOARDS['object_type'])
            return

        data['answers'].append(answer)

        if current < len(questions) - 1:
            data['current_question'] += 1
            next_question = questions[data['current_question']]

            if data['current_question'] == 2:
                await message.answer(next_question, reply_markup=KEYBOARDS['urgency'])
            elif data['current_question'] == 1 and request_type == 'work':
                await message.answer(next_question, reply_markup=KEYBOARDS['object_type'])
            else:
                await message.answer(next_question, reply_markup=KEYBOARDS['cancel'])
        else:
            data['price_report'] = await generate_price_report(request_type, data)
            await Form.confirm.set()
            await message.answer(data['price_report'], parse_mode="Markdown")
            await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å?", reply_markup=confirm_kb)


@dp.callback_query_handler(lambda c: c.data in ['confirm_yes', 'confirm_no'], state=Form.confirm)
async def confirm(callback: types.CallbackQuery, state: FSMContext):
    try:
        if not SPECIALIST_CHAT_ID:
            logging.error("–ù–µ –∑–∞–¥–∞–Ω SPECIALIST_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            await callback.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞")
            return

        async with state.proxy() as data:
            if callback.data == 'confirm_yes':
                try:
                    req_num = get_next_request_number()
                    username = f"@{callback.from_user.username}" if callback.from_user.username else "N/A"

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                    try:
                        cost_part = data['price_report'].split('–ò—Ç–æ–≥–æ: ')[1].split('‚ÇΩ')[0].strip()
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {str(e)}")
                        cost_part = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"

                    report = (
                            f"üìã –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å ‚Ññ{req_num}\n"
                            f"–¢–∏–ø: {'–£—á–µ–±–Ω—ã–π' if data['request_type'] == 'study' else '–†–∞–±–æ—á–∏–π'}\n"
                            f"–ö–ª–∏–µ–Ω—Ç: {username}\nID: {callback.from_user.id}\n\n"
                            + '\n'.join(f"{q}: {a}" for q, a in zip(data['questions'], data['answers']))
                            + f"\n\n–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost_part}‚ÇΩ"
                    )

                    await bot.send_message(
                        chat_id=SPECIALIST_CHAT_ID,
                        text=report,
                        parse_mode="Markdown",
                        reply_markup=types.InlineKeyboardMarkup().add(
                            types.InlineKeyboardButton(
                                "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
                                url=f"tg://user?id={callback.from_user.id}"
                            )
                        )
                    )

                    disclaimer = (
                        "\n\n‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. "
                        "–î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π."
                    )

                    await callback.message.edit_reply_markup()  # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    await callback.message.answer(
                        f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å ‚Ññ{req_num} –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.{disclaimer}",
                        reply_markup=KEYBOARDS['new_request'],
                        parse_mode="Markdown"
                    )

                except Exception as e:
                    logging.error(TEXTS['errors']['send'].format(e))
                    await callback.message.answer(
                        "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        reply_markup=KEYBOARDS['new_request']
                    )
            else:
                await callback.message.edit_reply_markup()  # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await callback.message.answer(
                    "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.",
                    reply_markup=KEYBOARDS['new_request']
                )
    finally:
        await state.finish()  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback

async def on_startup(dp):
    init_request_counter()
    await bot.set_webhook(WEBHOOK_URL)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


async def on_shutdown(dp):
    await bot.delete_webhook()
    await dp.storage.close()
    logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT
    )