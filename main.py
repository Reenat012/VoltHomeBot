"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Webhook –¥–ª—è Timeweb
"""

import os
import logging
import random
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
WEBHOOK_HOST = 'https://reenat012-volthomebot-2d67.twc1.net'
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = 8000

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
REQUEST_COUNTER_FILE = 'request_counter.txt'
WELCOME_PHRASES = [
    "–°–Ω–æ–≤–∞ –∫ –Ω–∞–º? –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É!",
    "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
    "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! –ü–æ–µ—Ö–∞–ª–∏!"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
service_type_kb = types.ReplyKeyboardMarkup(
    [
        [types.KeyboardButton("üìö –£—á–µ–±–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")],
        [types.KeyboardButton("üèóÔ∏è –†–∞–±–æ—á–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")]
    ],
    resize_keyboard=True
)

cancel_request_kb = types.ReplyKeyboardMarkup(
    [[types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏")]],
    resize_keyboard=True
)

new_request_kb = types.ReplyKeyboardMarkup(
    [[types.KeyboardButton("üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")]],
    resize_keyboard=True
)

building_type_kb = types.ReplyKeyboardMarkup(
    [
        [types.KeyboardButton("–ñ–∏–ª–æ–µ"), types.KeyboardButton("–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ")],
        [types.KeyboardButton("–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ"), types.KeyboardButton("–î—Ä—É–≥–æ–µ")],
        [types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç
urgency_kb = types.ReplyKeyboardMarkup(
    [
        [types.KeyboardButton("–°—Ä–æ—á–Ω–æ 24 —á–∞—Å–∞")],
        [types.KeyboardButton("–í —Ç–µ—á–µ–Ω–∏–∏ 3-5 –¥–Ω–µ–π")],
        [types.KeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 7 –¥–Ω–µ–π")],
        [types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏")]
    ],
    resize_keyboard=True
)

confirm_kb = types.InlineKeyboardMarkup().row(
    types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
    types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
)

# –í–æ–ø—Ä–æ—Å—ã (—É–±—Ä–∞–ª–∏ "–°—Ä–æ–∫ —Å–¥–∞—á–∏" –∏–∑ —É—á–µ–±–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
TECH_QUESTIONS = [
    "–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ (–º¬≤):",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–º–µ—â–µ–Ω–∏–π:",
    "–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:"
]

STUDY_QUESTIONS = [
    "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —É—á–µ–±–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
    "–¢—Ä–µ–±—É–µ–º—ã–π –æ–±—ä–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü):",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:"
]

class Form(StatesGroup):
    service_type = State()
    answers = State()
    building_type = State()
    custom_building = State()
    urgency = State()
    confirm = State()

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
URGENCY_COEFFICIENTS = {
    "–°—Ä–æ—á–Ω–æ 24 —á–∞—Å–∞": 1.5,
    "–í —Ç–µ—á–µ–Ω–∏–∏ 3-5 –¥–Ω–µ–π": 1.2,
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 7 –¥–Ω–µ–π": 1.0
}

# –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
TECH_BASE_PRICES = {
    1: (5000, 10000),   # –î–æ 50 –º¬≤
    2: (10000, 15000),  # 50-100 –º¬≤
    3: (15000, 25000),  # 100-200 –º¬≤
    4: (25000, None)    # –°–≤—ã—à–µ 200 –º¬≤
}

STUDY_BASE_PRICES = {
    1: (3000, 5000),    # –î–æ 20 —Å—Ç—Ä–∞–Ω–∏—Ü
    2: (5000, 8000),    # 20-40 —Å—Ç—Ä–∞–Ω–∏—Ü
    3: (8000, None)     # –°–≤—ã—à–µ 40 —Å—Ç—Ä–∞–Ω–∏—Ü
}

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º —Å—á–µ—Ç—á–∏–∫–∞
def init_request_counter():
    try:
        if not os.path.exists(REQUEST_COUNTER_FILE):
            with open(REQUEST_COUNTER_FILE, 'w') as f:
                f.write('0')
            logging.info("–°—á–µ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: {e}")

def get_next_request_number():
    try:
        with open(REQUEST_COUNTER_FILE, 'r+') as f:
            try:
                counter = int(f.read().strip() or 0)
            except ValueError:
                counter = 0
                logging.warning("–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞—è–≤–æ–∫")

            counter += 1
            f.seek(0)
            f.write(str(counter))
            return counter
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞: {e}")
        return random.randint(1000, 9999)

# –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
def calculate_tech_consultation(data):
    try:
        area = float(data['answers'][0])
        building = data['answers'][2] if len(data['answers']) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        complexity = {
            "–ñ–∏–ª–æ–µ": 1.0,
            "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ": 1.3,
            "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ": 1.5
        }.get(building.split()[0], 1.2)

        if area <= 50:
            price_range = TECH_BASE_PRICES[1]
        elif area <= 100:
            price_range = TECH_BASE_PRICES[2]
        elif area <= 200:
            price_range = TECH_BASE_PRICES[3]
        else:
            price_range = TECH_BASE_PRICES[4]

        base_price = (price_range[0] + (price_range[1] or price_range[0]*1.5)) // 2
        total = int(base_price * complexity)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        urgency_coeff = URGENCY_COEFFICIENTS.get(data.get('urgency', "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 7 –¥–Ω–µ–π"), 1.0)
        total_with_urgency = int(total * urgency_coeff)

        report = [
            "üîß *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:*",
            f"- –ü–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞: {area} –º¬≤",
            f"- –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: {building}",
            f"- –°—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {data.get('urgency', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 7 –¥–Ω–µ–π')} (x{urgency_coeff})",
            f"- –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_with_urgency:,} —Ä—É–±.",
            "\n_–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π_"
        ]
        return '\n'.join(report).replace(',', ' ')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."

def calculate_study_consultation(data):
    try:
        pages = int(data['answers'][1])
        if pages <= 20:
            price = STUDY_BASE_PRICES[1][0]
        elif pages <= 40:
            price = (STUDY_BASE_PRICES[2][0] + STUDY_BASE_PRICES[2][1]) // 2
        else:
            price = STUDY_BASE_PRICES[3][0] * 1.2

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        urgency_coeff = URGENCY_COEFFICIENTS.get(data.get('urgency', "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 7 –¥–Ω–µ–π"), 1.0)
        total_price = int(price * urgency_coeff)

        report = [
            "üìö *–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–µ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:*",
            f"- –¢–µ–º–∞: {data['answers'][0]}",
            f"- –û–±—ä–µ–º: {pages} —Å—Ç—Ä.",
            f"- –°—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {data.get('urgency', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 7 –¥–Ω–µ–π')} (x{urgency_coeff})",
            f"- –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price:,} —Ä—É–±.",
            "\n_–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π_"
        ]
        return '\n'.join(report).replace(',', ' ')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏", state='*')
async def cancel_request(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=new_request_kb)

@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    await Form.service_type.set()
    await message.answer(
        "üîå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
        reply_markup=service_type_kb
    )

@dp.message_handler(lambda m: m.text == "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")
async def new_request(message: types.Message):
    await Form.service_type.set()
    await message.answer(random.choice(WELCOME_PHRASES), reply_markup=service_type_kb)

@dp.message_handler(state=Form.service_type)
async def process_type(message: types.Message, state: FSMContext):
    if message.text not in ["üìö –£—á–µ–±–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "üèóÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    async with state.proxy() as data:
        data['service_type'] = "study" if "–£—á–µ–±–Ω–∞—è" in message.text else "tech"
        data['questions'] = STUDY_QUESTIONS if data['service_type'] == "study" else TECH_QUESTIONS
        data['current_question'] = 0
        data['answers'] = []

    await Form.answers.set()
    await message.answer(data['questions'][0], reply_markup=cancel_request_kb)

@dp.message_handler(state=Form.answers)
async def process_answers(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        current = data['current_question']
        answer = message.text

        if data['service_type'] == "tech":
            if current == 0 and not answer.replace('.', '').isdigit():
                await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ø–ª–æ—â–∞–¥–∏!", reply_markup=cancel_request_kb)
                return
            if current == 1 and not answer.isdigit():
                await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø–æ–º–µ—â–µ–Ω–∏–π!", reply_markup=cancel_request_kb)
                return

        if data['service_type'] == "study" and current == 1 and not answer.isdigit():
            await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü!", reply_markup=cancel_request_kb)
            return

        data['answers'].append(answer)

        if data['service_type'] == "tech" and current == 1:
            await Form.building_type.set()
            await message.answer("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:", reply_markup=building_type_kb)
            return

        if current < len(data['questions']) - 1:
            data['current_question'] += 1
            await message.answer(data['questions'][data['current_question']], reply_markup=cancel_request_kb)
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
            await Form.urgency.set()
            await message.answer("‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:", reply_markup=urgency_kb)

@dp.message_handler(state=Form.building_type)
async def process_building(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == "–î—Ä—É–≥–æ–µ":
            await Form.custom_building.set()
            await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞:", reply_markup=cancel_request_kb)
        else:
            data['answers'].append(message.text)
            await Form.answers.set()
            data['current_question'] += 1
            await message.answer(data['questions'][data['current_question']], reply_markup=cancel_request_kb)

@dp.message_handler(state=Form.custom_building)
async def process_custom_building(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['answers'].append(f"–î—Ä—É–≥–æ–µ ({message.text})")
        await Form.answers.set()
        data['current_question'] += 1
        await message.answer(data['questions'][data['current_question']], reply_markup=cancel_request_kb)

@dp.message_handler(state=Form.urgency)
async def process_urgency(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    if message.text not in URGENCY_COEFFICIENTS:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return

    async with state.proxy() as data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        data['urgency'] = message.text

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        if data['service_type'] == "tech":
            data['price_report'] = calculate_tech_consultation(data)
        else:
            data['price_report'] = calculate_study_consultation(data)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞—è–≤–∫–∏
        await Form.confirm.set()
        await message.answer(data['price_report'], parse_mode="Markdown")
        await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?", reply_markup=confirm_kb)

@dp.callback_query_handler(lambda c: c.data in ['confirm_yes', 'confirm_no'], state=Form.confirm)
async def confirm(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'confirm_yes':
        async with state.proxy() as data:
            try:
                req_num = get_next_request_number()
                username = f"@{callback.from_user.username}" if callback.from_user.username else "N/A"

                report = f"üìã *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ ‚Ññ{req_num}*\n"
                report += f"–¢–∏–ø: {'–£—á–µ–±–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è' if data['service_type'] == 'study' else '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'}\n"
                report += f"üÜî {callback.from_user.id} | üìß {username}\n"
                report += f"‚è±Ô∏è –°—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {data.get('urgency', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"

                if data['service_type'] == "tech":
                    report += (
                        f"üè¢ –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: {data['answers'][2]}\n"
                        f"üìè –ü–ª–æ—â–∞–¥—å: {data['answers'][0]} –º¬≤\n"
                        f"üö™ –ü–æ–º–µ—â–µ–Ω–∏–π: {data['answers'][1]}\n"
                        f"üíº –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {data['answers'][3]}\n\n"
                    )
                else:
                    report += (
                        f"üìñ –¢–µ–º–∞: {data['answers'][0]}\n"
                        f"üìÑ –û–±—ä–µ–º: {data['answers'][1]} —Å—Ç—Ä.\n"
                        f"üí° –ü–æ–∂–µ–ª–∞–Ω–∏—è: {data['answers'][2]}\n\n"
                    )

                report += f"üí¨ *–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:*\n{data['price_report']}"

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è DESIGNER_CHAT_ID
                designer_chat_id = os.getenv("DESIGNER_CHAT_ID")
                if not designer_chat_id:
                    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω DESIGNER_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

                await bot.send_message(
                    chat_id=designer_chat_id,
                    text=report,
                    parse_mode="Markdown",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton(
                            "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
                            url=f"tg://user?id={callback.from_user.id}"
                        )
                    )
                )

                await callback.message.answer(
                    f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø—Ä–∏–Ω—è—Ç–∞! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ ‚Ññ{req_num}\n"
                    "–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                    "–ü–æ–º–Ω–∏—Ç–µ, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!",
                    reply_markup=new_request_kb
                )

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {str(e)}", exc_info=True)
                await callback.message.answer(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=new_request_kb
                )
    else:
        await callback.message.answer(
            "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=new_request_kb
        )
    await state.finish()

# –í–µ–±—Ö—É–∫
async def on_startup(dp):
    init_request_counter()
    await bot.set_webhook(WEBHOOK_URL)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown(dp):
    await bot.delete_webhook()
    await dp.storage.close()
    logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT
    )