import os
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("DESIGNER_CHAT_ID")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = 8000

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

# –°—á–µ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫
request_counter = 0


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return types.ReplyKeyboardMarkup([
        [types.KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")]
    ], resize_keyboard=True)


def type_keyboard():
    return types.ReplyKeyboardMarkup([
        [types.KeyboardButton("üìö –£—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")],
        [types.KeyboardButton("üèóÔ∏è –†–∞–±–æ—á–∏–π –ø—Ä–æ–µ–∫—Ç")],
        [types.KeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å")]
    ], resize_keyboard=True)


def cancel_keyboard():
    return types.ReplyKeyboardMarkup([
        [types.KeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å")]
    ], resize_keyboard=True)


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class OrderStates(StatesGroup):
    CHOOSING_TYPE = State()
    WORK_DETAILS = State()
    STUDY_DETAILS = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    await message.answer(
        "üîå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É",
        reply_markup=main_keyboard()
    )


@dp.message_handler(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def create_order(message: types.Message):
    await OrderStates.CHOOSING_TYPE.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=type_keyboard())


@dp.message_handler(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", state='*')
async def cancel_order(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())


@dp.message_handler(state=OrderStates.CHOOSING_TYPE)
async def process_type(message: types.Message, state: FSMContext):
    if message.text == "üìö –£—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç":
        await OrderStates.STUDY_DETAILS.set()
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=cancel_keyboard())
    elif message.text == "üèóÔ∏è –†–∞–±–æ—á–∏–π –ø—Ä–æ–µ–∫—Ç":
        await OrderStates.WORK_DETAILS.set()
        await message.answer("üìè –í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ (–º¬≤):", reply_markup=cancel_keyboard())
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞")


@dp.message_handler(state=OrderStates.WORK_DETAILS)
async def process_work_order(message: types.Message, state: FSMContext):
    global request_counter
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏
        area = float(message.text)
        request_counter += 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_msg = (
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_counter} –ø—Ä–∏–Ω—è—Ç–∞!\n"
            f"–¢–∏–ø: –†–∞–±–æ—á–∏–π –ø—Ä–æ–µ–∫—Ç\n"
            f"–ü–ª–æ—â–∞–¥—å: {area} –º¬≤\n\n"
            "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç."
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_msg = (
            f"üèóÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_counter}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.id}\n"
            f"–¢–∏–ø: –†–∞–±–æ—á–∏–π –ø—Ä–æ–µ–∫—Ç\n"
            f"–ü–ª–æ—â–∞–¥—å: {area} –º¬≤\n"
            f"–°—Å—ã–ª–∫–∞: tg://user?id={message.from_user.id}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(user_msg, reply_markup=main_keyboard())
        if ADMIN_CHAT_ID:
            await bot.send_message(ADMIN_CHAT_ID, admin_msg)

    except ValueError:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ø–ª–æ—â–∞–¥–∏")
        return

    await state.finish()


@dp.message_handler(state=OrderStates.STUDY_DETAILS)
async def process_study_order(message: types.Message, state: FSMContext):
    global request_counter
    topic = message.text
    request_counter += 1

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_msg = (
        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_counter} –ø—Ä–∏–Ω—è—Ç–∞!\n"
        f"–¢–∏–ø: –£—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç\n"
        f"–¢–µ–º–∞: {topic}\n\n"
        "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç."
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_msg = (
        f"üìö –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_counter}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.id}\n"
        f"–¢–∏–ø: –£—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç\n"
        f"–¢–µ–º–∞: {topic}\n"
        f"–°—Å—ã–ª–∫–∞: tg://user?id={message.from_user.id}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.answer(user_msg, reply_markup=main_keyboard())
    if ADMIN_CHAT_ID:
        await bot.send_message(ADMIN_CHAT_ID, admin_msg)

    await state.finish()


# –í–µ–±—Ö—É–∫–∏
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í–µ–±—Ö—É–∫: {WEBHOOK_URL}")


async def on_shutdown(dp):
    await bot.delete_webhook()
    logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
        skip_updates=True
    )