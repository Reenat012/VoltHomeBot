"""
VoltHomeBot ‚Äî –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª.
Webhook –¥–ª—è Timeweb + –∞–≤—Ç–æ-—Ñ–æ–ª–±—ç–∫ –≤ long polling.
MVP (–ë–µ—Ç–∞): —Ñ–ª–∞–∂–æ–∫ "–Ω—É–∂–µ–Ω —á–µ—Ä—Ç—ë–∂", –ø—Ä–∏—ë–º –≤–ª–æ–∂–µ–Ω–∏–π, —Ä–∞—Å—á—ë—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏.
"""

import os
import logging
import random
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

# -------------------- ENV --------------------
load_dotenv()

def _bool_env(name: str, default: bool = False) -> bool:
    val = (os.getenv(name) or "").strip().lower()
    if val in ("1", "true", "yes", "y", "on"):
        return True
    if val in ("0", "false", "no", "n", "off"):
        return False
    return default

BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

try:
    DESIGNER_CHAT_ID = int((os.getenv("DESIGNER_CHAT_ID") or "0").strip())
except ValueError:
    raise RuntimeError("DESIGNER_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
if not DESIGNER_CHAT_ID:
    raise RuntimeError("DESIGNER_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# Webhook / Server
WEBHOOK_HOST = (os.getenv("WEBHOOK_HOST") or "").strip().rstrip("/")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
WEBAPP_HOST = os.getenv("WEBAPP_HOST", "0.0.0.0")
WEBAPP_PORT = int(os.getenv("WEBAPP_PORT", "8000"))
USE_POLLING = _bool_env("USE_POLLING", default=False)

WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None

# -------------------- BOT / DP --------------------
# –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π Markdown, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.MARKDOWN)
dp = Dispatcher(bot, storage=MemoryStorage())

# -------------------- MISC --------------------
REQUEST_COUNTER_FILE = "request_counter.txt"
WELCOME_PHRASES = [
    "–°–Ω–æ–≤–∞ –∫ –Ω–∞–º? –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É!",
    "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
    "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! –ü–æ–µ—Ö–∞–ª–∏!",
]

# -------------------- KEYBOARDS --------------------
service_type_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton("üìö –£—á–µ–±–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")],
        [types.KeyboardButton("üèóÔ∏è –†–∞–±–æ—á–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")],
    ],
    resize_keyboard=True,
)

cancel_request_kb = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏")]],
    resize_keyboard=True,
)

attachments_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton("–ì–æ—Ç–æ–≤–æ")],
        [types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏")],
    ],
    resize_keyboard=True,
)

new_request_kb = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton("üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")]],
    resize_keyboard=True,
)

building_type_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton("–ñ–∏–ª–æ–µ"), types.KeyboardButton("–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ")],
        [types.KeyboardButton("–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ"), types.KeyboardButton("–î—Ä—É–≥–æ–µ")],
        [types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏")],
    ],
    resize_keyboard=True,
)

urgency_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton("–°—Ä–æ—á–Ω–æ 24 —á–∞—Å–∞")],
        [types.KeyboardButton("–í —Ç–µ—á–µ–Ω–∏–∏ 3-5 –¥–Ω–µ–π")],
        [types.KeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 7 –¥–Ω–µ–π")],
        [types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏")],
    ],
    resize_keyboard=True,
)

confirm_kb = types.InlineKeyboardMarkup().row(
    types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
    types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no"),
)

need_drawing_kb = types.InlineKeyboardMarkup().row(
    types.InlineKeyboardButton("üìê –ù—É–∂–µ–Ω —á–µ—Ä—Ç—ë–∂", callback_data="drawing_yes"),
    types.InlineKeyboardButton("–ë–µ–∑ —á–µ—Ä—Ç–µ–∂–∞", callback_data="drawing_no"),
)

# -------------------- QUESTIONS --------------------
TECH_QUESTIONS = [
    "–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ (–º¬≤):",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–º–µ—â–µ–Ω–∏–π:",
    "–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
]

STUDY_QUESTIONS = [
    "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —É—á–µ–±–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
    "–¢—Ä–µ–±—É–µ–º—ã–π –æ–±—ä–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü):",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:",
]

# -------------------- FSM --------------------
class Form(StatesGroup):
    service_type = State()
    answers = State()
    building_type = State()
    custom_building = State()
    need_drawing = State()
    attachments = State()
    urgency = State()
    confirm = State()

# -------------------- PRICING --------------------
URGENCY_COEFFICIENTS = {
    "–°—Ä–æ—á–Ω–æ 24 —á–∞—Å–∞": 1.5,
    "–í —Ç–µ—á–µ–Ω–∏–∏ 3-5 –¥–Ω–µ–π": 1.2,
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 7 –¥–Ω–µ–π": 1.0,
}

TECH_BASE_PRICES = {
    1: (5000, 10000),
    2: (10000, 15000),
    3: (15000, 25000),
    4: (25000, None),
}

STUDY_BASE_PRICES = {
    1: (3000, 5000),
    2: (5000, 8000),
    3: (8000, None),
}

# -------------------- COUNTER --------------------
def init_request_counter() -> None:
    try:
        if not os.path.exists(REQUEST_COUNTER_FILE):
            with open(REQUEST_COUNTER_FILE, "w") as f:
                f.write("0")
            logging.info("–°—á—ë—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞: {e}")

def get_next_request_number() -> int:
    try:
        with open(REQUEST_COUNTER_FILE, "r+") as f:
            try:
                counter = int(f.read().strip() or 0)
            except ValueError:
                counter = 0
                logging.warning("–°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –∑–∞—è–≤–æ–∫.")
            counter += 1
            f.seek(0)
            f.write(str(counter))
            return counter
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—á—ë—Ç—á–∏–∫–∞: {e}")
        return random.randint(1000, 9999)

# -------------------- CALCULATORS --------------------
def calculate_tech_consultation(data: dict) -> str:
    try:
        area = float(data["answers"][0])
        building = data["answers"][2] if len(data["answers"]) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        complexity = {
            "–ñ–∏–ª–æ–µ": 1.0,
            "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ": 1.3,
            "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ": 1.5,
        }.get(building.split()[0], 1.2)

        if area <= 50:
            price_range = TECH_BASE_PRICES[1]
        elif area <= 100:
            price_range = TECH_BASE_PRICES[2]
        elif area <= 200:
            price_range = TECH_BASE_PRICES[3]
        else:
            price_range = TECH_BASE_PRICES[4]

        hi = price_range[1] if price_range[1] is not None else int(price_range[0] * 1.5)
        base_price = int((price_range[0] + hi) / 2)
        total = int(base_price * complexity)

        urgency_coeff = URGENCY_COEFFICIENTS.get(data.get("urgency", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 7 –¥–Ω–µ–π"), 1.0)
        total_with_urgency = int(total * urgency_coeff)

        report = [
            "üîß *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:*",
            f"- –ü–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞: {area} –º¬≤",
            f"- –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: {building}",
            f"- –°—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {data.get('urgency', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 7 –¥–Ω–µ–π')} (x{urgency_coeff})",
            f"- –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_with_urgency:,} —Ä—É–±.",
            "\n_–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π_",
        ]
        return "\n".join(report).replace(",", " ")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ (tech): %s", e)
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."

def calculate_study_consultation(data: dict) -> str:
    try:
        pages = int(data["answers"][1])
        if pages <= 20:
            price = STUDY_BASE_PRICES[1][0]
        elif pages <= 40:
            price = int((STUDY_BASE_PRICES[2][0] + STUDY_BASE_PRICES[2][1]) / 2)
        else:
            price = int(STUDY_BASE_PRICES[3][0] * 1.2)

        urgency_coeff = URGENCY_COEFFICIENTS.get(data.get("urgency", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 7 –¥–Ω–µ–π"), 1.0)
        total_price = int(price * urgency_coeff)

        report = [
            "üìö *–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–µ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:*",
            f"- –¢–µ–º–∞: {data['answers'][0]}",
            f"- –û–±—ä—ë–º: {pages} —Å—Ç—Ä.",
            f"- –°—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {data.get('urgency', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 7 –¥–Ω–µ–π')} (x{urgency_coeff})",
            f"- –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price:,} —Ä—É–±.",
            "\n_–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π_",
        ]
        return "\n".join(report).replace(",", " ")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ (study): %s", e)
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."

# -------------------- HANDLERS --------------------
@dp.message_handler(lambda m: m.text == "–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏", state="*")
async def cancel_request(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=new_request_kb)

@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    await Form.service_type.set()
    await message.answer(
        "üîå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π *VoltHome (–ë–µ—Ç–∞)*!\n\n"
        "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ‚Äî –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
        reply_markup=service_type_kb,
    )

@dp.message_handler(lambda m: m.text == "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")
async def new_request(message: types.Message):
    await Form.service_type.set()
    await message.answer(random.choice(WELCOME_PHRASES), reply_markup=service_type_kb)

@dp.message_handler(state=Form.service_type)
async def process_type(message: types.Message, state: FSMContext):
    if message.text not in ["üìö –£—á–µ–±–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "üèóÔ∏è –†–∞–±–æ—á–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    svc = "study" if "–£—á–µ–±–Ω–∞—è" in message.text else "tech"
    questions = STUDY_QUESTIONS if svc == "study" else TECH_QUESTIONS
    await state.update_data(service_type=svc, questions=questions, current_question=0, answers=[], attachments=[])

    await Form.answers.set()
    await message.answer(questions[0], reply_markup=cancel_request_kb)

@dp.message_handler(state=Form.answers)
async def process_answers(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current = data.get("current_question", 0)
    svc = data.get("service_type", "tech")
    questions = data.get("questions", [])
    answers = data.get("answers", [])

    answer = (message.text or "").strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏–∏
    if svc == "tech":
        if current == 0 and not answer.replace(".", "", 1).isdigit():
            await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ø–ª–æ—â–∞–¥–∏!", reply_markup=cancel_request_kb)
            return
        if current == 1 and not answer.isdigit():
            await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø–æ–º–µ—â–µ–Ω–∏–π!", reply_markup=cancel_request_kb)
            return
    if svc == "study" and current == 1 and not answer.isdigit():
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü!", reply_markup=cancel_request_kb)
        return

    answers.append(answer)
    await state.update_data(answers=answers)

    # –ü–æ—Å–ª–µ 2-–≥–æ –æ—Ç–≤–µ—Ç–∞ ‚Äî —Ñ–ª–∞–∂–æ–∫ "–Ω—É–∂–µ–Ω —á–µ—Ä—Ç—ë–∂"
    if current == 1:
        await Form.need_drawing.set()
        await message.answer(
            "–ù—É–∂–Ω–∞ –ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π *—á–µ—Ä—Ç–µ–∂–∞ —Å—Ö–µ–º—ã —â–∏—Ç–∞*?",
            reply_markup=need_drawing_kb,
        )
        await state.update_data(current_question=current + 1)
        return

    # –í–µ—Ç–∫–∞ "—Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞" –¥–ª—è tech –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ –æ –ø–æ–º–µ—â–µ–Ω–∏—è—Ö
    if svc == "tech" and current == 1:
        await Form.building_type.set()
        await message.answer("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:", reply_markup=building_type_kb)
        return

    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å / –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    current += 1
    if current < len(questions):
        await state.update_data(current_question=current)
        await message.answer(questions[current], reply_markup=cancel_request_kb)
    else:
        await Form.urgency.set()
        await message.answer("‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:", reply_markup=urgency_kb)

@dp.callback_query_handler(lambda c: c.data in ("drawing_yes", "drawing_no"), state=Form.need_drawing)
async def choose_drawing(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(need_drawing=(callback.data == "drawing_yes"))

    await Form.attachments.set()
    await callback.message.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã (–ø–ª–∞–Ω, –¢–ó, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã) ‚Äî –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=attachments_kb,
    )

@dp.message_handler(lambda m: m.text == "–ì–æ—Ç–æ–≤–æ", state=Form.attachments)
async def attachments_done(message: types.Message, state: FSMContext):
    await Form.urgency.set()
    await message.answer("‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:", reply_markup=urgency_kb)

@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.DOCUMENT], state=Form.attachments)
async def collect_attachments(message: types.Message, state: FSMContext):
    data = await state.get_data()
    files = list(data.get("attachments", []))

    if len(files) >= 10:
        await message.answer("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–π. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return

    if message.photo:
        fid = message.photo[-1].file_id
        files.append(("photo", fid))
    elif message.document:
        fid = message.document.file_id
        files.append(("document", fid))

    await state.update_data(attachments=files)
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–π: {len(files)}. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.")

@dp.message_handler(state=Form.attachments)
async def attachments_other_text(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=attachments_kb)

@dp.message_handler(state=Form.building_type)
async def process_building(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text == "–î—Ä—É–≥–æ–µ":
        await Form.custom_building.set()
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞:", reply_markup=cancel_request_kb)
    else:
        answers = data.get("answers", [])
        answers.append(message.text)
        await state.update_data(answers=answers)
        await Form.answers.set()
        cur = data.get("current_question", 0) + 1
        await state.update_data(current_question=cur)
        questions = data.get("questions", [])
        await message.answer(questions[cur], reply_markup=cancel_request_kb)

@dp.message_handler(state=Form.custom_building)
async def process_custom_building(message: types.Message, state: FSMContext):
    data = await state.get_data()
    answers = data.get("answers", [])
    answers.append(f"–î—Ä—É–≥–æ–µ ({message.text})")
    await state.update_data(answers=answers)
    await Form.answers.set()
    cur = data.get("current_question", 0) + 1
    await state.update_data(current_question=cur)
    questions = data.get("questions", [])
    await message.answer(questions[cur], reply_markup=cancel_request_kb)

@dp.message_handler(state=Form.urgency)
async def process_urgency(message: types.Message, state: FSMContext):
    if message.text not in URGENCY_COEFFICIENTS:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return

    await state.update_data(urgency=message.text)
    data = await state.get_data()

    if data.get("service_type") == "tech":
        price_report = calculate_tech_consultation(data)
    else:
        price_report = calculate_study_consultation(data)

    await state.update_data(price_report=price_report)
    await Form.confirm.set()
    await message.answer(price_report)
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?", reply_markup=confirm_kb)

@dp.callback_query_handler(lambda c: c.data in ["confirm_yes", "confirm_no"], state=Form.confirm)
async def confirm(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "confirm_no":
        await state.finish()
        await callback.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=new_request_kb)
        return

    req_num = get_next_request_number()
    data = await state.get_data()
    username = f"@{callback.from_user.username}" if callback.from_user.username else "N/A"

    report_lines = [
        f"üìã *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ ‚Ññ{req_num}*",
        f"üß™ –ö–∞–Ω–∞–ª: VoltHome (–ë–µ—Ç–∞)",
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {callback.from_user.full_name}",
        f"üÜî {callback.from_user.id} | üìß {username}",
        f"–¢–∏–ø: {'–£—á–µ–±–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è' if data.get('service_type') == 'study' else '–†–∞–±–æ—á–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'}",
        f"‚è±Ô∏è –°—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {data.get('urgency', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
        "",
    ]

    answers = data.get("answers", [])
    if data.get("service_type") == "tech":
        area = answers[0] if len(answers) > 0 else "‚Äî"
        rooms = answers[1] if len(answers) > 1 else "‚Äî"
        building = answers[2] if len(answers) > 2 else "‚Äî"
        requirements = answers[3] if len(answers) > 3 else "‚Äî"
        report_lines += [
            f"üè¢ –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: {building}",
            f"üìè –ü–ª–æ—â–∞–¥—å: {area} –º¬≤",
            f"üö™ –ü–æ–º–µ—â–µ–Ω–∏–π: {rooms}",
            f"üíº –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {requirements}",
            "",
        ]
    else:
        topic = answers[0] if len(answers) > 0 else "‚Äî"
        pages = answers[1] if len(answers) > 1 else "‚Äî"
        wishes = answers[2] if len(answers) > 2 else "‚Äî"
        report_lines += [
            f"üìñ –¢–µ–º–∞: {topic}",
            f"üìÑ –û–±—ä—ë–º: {pages} —Å—Ç—Ä.",
            f"üí° –ü–æ–∂–µ–ª–∞–Ω–∏—è: {wishes}",
            "",
        ]

    need_drawing = data.get("need_drawing")
    if need_drawing is not None:
        report_lines.append(f"üìê –ß–µ—Ä—Ç—ë–∂ —Å—Ö–µ–º—ã —â–∏—Ç–∞: {'–Ω—É–∂–µ–Ω' if need_drawing else '–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}")
    attachments = data.get("attachments", [])
    if attachments:
        report_lines.append(f"üìé –í–ª–æ–∂–µ–Ω–∏—è: {len(attachments)} —à—Ç.")
    report_lines += ["", "üí¨ *–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:*", data.get("price_report", "‚Äî")]

    report_text = "\n".join(report_lines)

    try:
        await bot.send_message(
            chat_id=DESIGNER_CHAT_ID,
            text=report_text,
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=f"tg://user?id={callback.from_user.id}")
            ),
        )
        for kind, fid in attachments:
            if kind == "photo":
                await bot.send_photo(DESIGNER_CHAT_ID, fid, caption=f"–ó–∞—è–≤–∫–∞ ‚Ññ{req_num}: —Ñ–æ—Ç–æ")
            else:
                await bot.send_document(DESIGNER_CHAT_ID, fid, caption=f"–ó–∞—è–≤–∫–∞ ‚Ññ{req_num}: –¥–æ–∫—É–º–µ–Ω—Ç")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: %s", e)

    await state.finish()
    await callback.message.answer(
        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø—Ä–∏–Ω—è—Ç–∞! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ ‚Ññ{req_num}\n"
        "–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "–ü–æ–º–Ω–∏—Ç–µ, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!",
        reply_markup=new_request_kb,
    )

# -------------------- START/SHUTDOWN --------------------
async def try_set_webhook() -> bool:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫. –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ.
    """
    if not WEBHOOK_URL:
        logging.error("WEBHOOK_HOST –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞.")
        return False

    from aiogram.utils.exceptions import TelegramAPIError
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_webhook(WEBHOOK_URL)
        info = await bot.get_webhook_info()
        logging.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s (pending_update_count=%s)", info.url, info.pending_update_count)
        return True
    except TelegramAPIError as e:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫: %s", e)
        return False

def start_as_webhook():
    from aiogram.utils.executor import start_webhook
    logging.info("–ó–∞–ø—É—Å–∫–∞—é aiohttp-—Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook –Ω–∞ %s:%s", WEBAPP_HOST, WEBAPP_PORT)
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=lambda _: init_request_counter(),
        on_shutdown=None,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )

def start_as_polling():
    from aiogram.utils.executor import start_polling
    logging.info("–ó–∞–ø—É—Å–∫–∞—é long polling (skip_updates=True)")
    init_request_counter()
    start_polling(dp, skip_updates=True)

# -------------------- ENTRY --------------------
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
    logging.info("Bot: %s", (asyncio.get_event_loop().run_until_complete(bot.get_me())).username)

    if USE_POLLING:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ long polling –ø–æ —Ñ–ª–∞–≥—É –æ–∫—Ä—É–∂–µ–Ω–∏—è
        start_as_polling()
    else:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫, –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ ‚Äî —Ñ–æ–ª–±—ç–∫ –≤ polling
        ok = asyncio.get_event_loop().run_until_complete(try_set_webhook())
        if ok:
            start_as_webhook()
        else:
            logging.info("–§–æ–ª–±—ç–∫ –≤ long polling –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –≤–µ–±—Ö—É–∫–æ–º.")
            start_as_polling()