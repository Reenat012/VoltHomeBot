"""
VoltHomeBot ‚Äî –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª.
Webhook –¥–ª—è Timeweb + –∞–≤—Ç–æ-—Ñ–æ–ª–±—ç–∫ –≤ long polling.
–£—Å–ª—É–≥–∏:
1) –ß–µ—Ä—Ç—ë–∂ —Å—Ö–µ–º—ã (–ø–æ–¥—Ç–∏–ø—ã), 2) –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ä–∞—Å—á—ë—Ç—É –Ω–∞–≥—Ä—É–∑–æ–∫ (–ø–æ–¥—Ç–∏–ø—ã),
3) –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, 4) –î—Ä—É–≥–æ–µ.
"""

import os
import logging
import random
import asyncio
from typing import List, Tuple, Optional

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

# -------------------- ENV --------------------
load_dotenv()

def _bool_env(name: str, default: bool = False) -> bool:
    val = (os.getenv(name) or "").strip().lower()
    if val in ("1", "true", "yes", "y", "on"):
        return True
    if val in ("0", "false", "no", "n", "off"):
        return False
    return default

BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

try:
    DESIGNER_CHAT_ID = int((os.getenv("DESIGNER_CHAT_ID") or "0").strip())
except ValueError:
    raise RuntimeError("DESIGNER_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
if not DESIGNER_CHAT_ID:
    raise RuntimeError("DESIGNER_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# Webhook / Server
WEBHOOK_HOST = (os.getenv("WEBHOOK_HOST") or "").strip().rstrip("/")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
WEBAPP_HOST = os.getenv("WEBAPP_HOST", "0.0.0.0")
WEBAPP_PORT = int(os.getenv("WEBAPP_PORT", "8000"))
USE_POLLING = _bool_env("USE_POLLING", default=False)
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None

# -------------------- BOT / DP --------------------
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.MARKDOWN)  # –æ—Å—Ç–∞–≤–∏–º Markdown –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
dp = Dispatcher(bot, storage=MemoryStorage())

# -------------------- MISC --------------------
REQUEST_COUNTER_FILE = "request_counter.txt"
WELCOME_PHRASES = [
    "–°–Ω–æ–≤–∞ –∫ –Ω–∞–º? –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É!",
    "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
    "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! –ü–æ–µ—Ö–∞–ª–∏!",
]

# -------------------- KEYBOARDS --------------------
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—Å–ª—É–≥
services_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton("1‚É£ –ß–µ—Ä—Ç—ë–∂ —Å—Ö–µ–º—ã")],
        [types.KeyboardButton("2‚É£ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ä–∞—Å—á—ë—Ç—É –Ω–∞–≥—Ä—É–∑–æ–∫")],
        [types.KeyboardButton("3‚É£ –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")],
        [types.KeyboardButton("4‚É£ –î—Ä—É–≥–æ–µ")],
    ],
    resize_keyboard=True,
)

# –ü–æ–¥–º–µ–Ω—é ¬´–ß–µ—Ä—Ç—ë–∂ —Å—Ö–µ–º—ã¬ª
draft_sub_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton("–û–¥–Ω–æ–ª–∏–Ω–µ–π–Ω–∞—è —Å—Ö–µ–º–∞")],
        [types.KeyboardButton("–ú–æ–Ω—Ç–∞–∂–Ω–∞—è —Å—Ö–µ–º–∞")],
        [types.KeyboardButton("–î—Ä—É–≥–æ–µ (—á–µ—Ä—Ç—ë–∂)")],
        [types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏")],
    ],
    resize_keyboard=True,
)

# –ü–æ–¥–º–µ–Ω—é ¬´–†–∞—Å—á—ë—Ç –Ω–∞–≥—Ä—É–∑–æ–∫¬ª
loads_sub_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton("–ü–æ–¥–±–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–æ–≤/–£–ó–û")],
        [types.KeyboardButton("–ê—É–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")],
        [types.KeyboardButton("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ñ–∞–∑–∞–º")],
        [types.KeyboardButton("–î—Ä—É–≥–æ–µ (–Ω–∞–≥—Ä—É–∑–∫–∏)")],
        [types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏")],
    ],
    resize_keyboard=True,
)

cancel_request_kb = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏")]],
    resize_keyboard=True,
)

attachments_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton("–ì–æ—Ç–æ–≤–æ")],
        [types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏")],
    ],
    resize_keyboard=True,
)

new_request_kb = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton("üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")]],
    resize_keyboard=True,
)

object_type_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton("–ñ–∏–ª–æ–µ"), types.KeyboardButton("–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ")],
        [types.KeyboardButton("–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ"), types.KeyboardButton("–î—Ä—É–≥–æ–µ")],
        [types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏")],
    ],
    resize_keyboard=True,
)

urgency_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton("–°—Ä–æ—á–Ω–æ 24 —á–∞—Å–∞")],
        [types.KeyboardButton("–í —Ç–µ—á–µ–Ω–∏–∏ 3-5 –¥–Ω–µ–π")],
        [types.KeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 7 –¥–Ω–µ–π")],
        [types.KeyboardButton("–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏")],
    ],
    resize_keyboard=True,
)

# –ò–Ω–ª–∞–π–Ω ¬´–¥–∞/–Ω–µ—Ç¬ª
def yn_kb(yes_cb: str, no_cb: str) -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–î–∞", callback_data=yes_cb),
           types.InlineKeyboardButton("–ù–µ—Ç", callback_data=no_cb))
    return kb

# -------------------- FSM --------------------
class Form(StatesGroup):
    service_category = State()   # draft | loads | full | other
    sub_category = State()       # —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–ª—è draft/loads
    object_type = State()
    area = State()
    rooms = State()
    groups_count = State()
    has_list_of_groups = State()
    need_inrush = State()
    need_mount_scheme = State()
    free_text = State()
    attachments = State()
    urgency = State()
    confirm = State()

# -------------------- PRICING --------------------
URGENCY_COEFFICIENTS = {
    "–°—Ä–æ—á–Ω–æ 24 —á–∞—Å–∞": 1.5,
    "–í —Ç–µ—á–µ–Ω–∏–∏ 3-5 –¥–Ω–µ–π": 1.2,
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 7 –¥–Ω–µ–π": 1.0,
}

# –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–π—Å—ã ‚Äî –Ω–∞–±—Ä–æ—Å–æ–∫, –ø–æ–¥—Å—Ç—Ä–æ–π –ø–æ —Ñ–∞–∫—Ç—É
DRAFT_BASE = {
    "draft_oneline": 7000,
    "draft_mount": 9000,
    "draft_other": 8000,
}
LOADS_BASE = {
    "loads_pick": 6000,
    "loads_audit": 8000,
    "loads_phases": 7000,
    "loads_other": 6500,
}
FULL_BASE = 15000  # –±–∞–∑–æ–≤—ã–π –∑–∞ ¬´–ø–æ–ª–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é¬ª

# -------------------- COUNTER --------------------
def init_request_counter() -> None:
    try:
        if not os.path.exists(REQUEST_COUNTER_FILE):
            with open(REQUEST_COUNTER_FILE, "w") as f:
                f.write("0")
            logging.info("–°—á—ë—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞: {e}")

def get_next_request_number() -> int:
    try:
        with open(REQUEST_COUNTER_FILE, "r+") as f:
            try:
                counter = int(f.read().strip() or 0)
            except ValueError:
                counter = 0
                logging.warning("–°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –∑–∞—è–≤–æ–∫.")
            counter += 1
            f.seek(0)
            f.write(str(counter))
            return counter
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—á—ë—Ç—á–∏–∫–∞: {e}")
        return random.randint(1000, 9999)

# -------------------- CALCULATORS --------------------
def _urgency_coeff(state_data: dict) -> float:
    return URGENCY_COEFFICIENTS.get(state_data.get("urgency", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 7 –¥–Ω–µ–π"), 1.0)

def calc_price_draft(state_data: dict) -> str:
    sub = state_data.get("sub_category", "draft_other")
    base = DRAFT_BASE.get(sub, DRAFT_BASE["draft_other"])
    # –õ—ë–≥–∫–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–ª–æ—â–∞–¥–∏
    area = float(state_data.get("area") or 0)
    k_area = 1.0
    if area > 80: k_area = 1.15
    if area > 150: k_area = 1.3
    # –ù–∞–¥–±–∞–≤–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–µ—Ä–µ—á–Ω—è –≥—Ä—É–ø–ø
    if not state_data.get("has_list_of_groups", False):
        base += 1500
    total = int(base * k_area * _urgency_coeff(state_data))
    lines = [
        "üìê *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (—á–µ—Ä—Ç—ë–∂):*",
        f"- –ü–æ–¥—Ç–∏–ø: {sub.replace('_', ' ')}",
        f"- –ü–ª–æ—â–∞–¥—å: {int(area)} –º¬≤",
        f"- –ü–µ—Ä–µ—á–µ–Ω—å –≥—Ä—É–ø–ø: {'–µ—Å—Ç—å' if state_data.get('has_list_of_groups') else '–Ω–µ—Ç'}",
        f"- –°—Ä–æ—á–Ω–æ—Å—Ç—å: {state_data.get('urgency')} (x{_urgency_coeff(state_data)})",
        f"- –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total:,} —Ä—É–±.",
        "\n_–ò—Ç–æ–≥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ—Å—Ç–∞–≤–∞ –∑–∞–¥–∞–Ω–∏—è –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤._",
    ]
    return "\n".join(lines).replace(",", " ")

def calc_price_loads(state_data: dict) -> str:
    sub = state_data.get("sub_category", "loads_other")
    base = LOADS_BASE.get(sub, LOADS_BASE["loads_other"])
    area = float(state_data.get("area") or 0)
    groups = int(state_data.get("groups_count") or 0)
    # –ø—Ä–æ—Å—Ç—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    k_area = 1.0 + min(area, 300) / 1000.0       # –¥–æ +0.3
    k_groups = 1.0 + min(groups, 40) / 200.0     # –¥–æ +0.2
    if state_data.get("need_inrush"):
        base += 1000
    total = int(base * k_area * k_groups * _urgency_coeff(state_data))
    lines = [
        "üîå *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (–Ω–∞–≥—Ä—É–∑–∫–∏):*",
        f"- –ü–æ–¥—Ç–∏–ø: {sub.replace('_', ' ')}",
        f"- –ü–ª–æ—â–∞–¥—å: {int(area)} –º¬≤, –≥—Ä—É–ø–ø: {groups}",
        f"- –ü—É—Å–∫–æ–≤—ã–µ —Ç–æ–∫–∏: {'—É—á–∏—Ç—ã–≤–∞—Ç—å' if state_data.get('need_inrush') else '–Ω–µ—Ç'}",
        f"- –°—Ä–æ—á–Ω–æ—Å—Ç—å: {state_data.get('urgency')} (x{_urgency_coeff(state_data)})",
        f"- –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total:,} —Ä—É–±.",
        "\n_–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Ç–æ—á–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö._",
    ]
    return "\n".join(lines).replace(",", " ")

def calc_price_full(state_data: dict) -> str:
    base = FULL_BASE
    area = float(state_data.get("area") or 0)
    rooms = int(state_data.get("rooms") or 0)
    if state_data.get("need_mount_scheme"):
        base += 3000
    # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    k_area = 1.0 + min(area, 300) / 800.0    # –¥–æ +0.375
    k_rooms = 1.0 + min(rooms, 20) / 100.0   # –¥–æ +0.2
    total = int(base * k_area * k_rooms * _urgency_coeff(state_data))
    lines = [
        "üß© *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è):*",
        f"- –ü–ª–æ—â–∞–¥—å: {int(area)} –º¬≤, –ø–æ–º–µ—â–µ–Ω–∏–π: {rooms}",
        f"- –ú–æ–Ω—Ç–∞–∂–Ω–∞—è —Å—Ö–µ–º–∞: {'–Ω—É–∂–Ω–∞' if state_data.get('need_mount_scheme') else '–Ω–µ –Ω—É–∂–Ω–∞'}",
        f"- –°—Ä–æ—á–Ω–æ—Å—Ç—å: {state_data.get('urgency')} (x{_urgency_coeff(state_data)})",
        f"- –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total:,} —Ä—É–±.",
        "\n_–ò—Ç–æ–≥–æ–≤–∞—è —Å–º–µ—Ç–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è._",
    ]
    return "\n".join(lines).replace(",", " ")

# -------------------- HANDLERS --------------------
@dp.message_handler(lambda m: m.text == "–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏", state="*")
async def cancel_request(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=new_request_kb)

@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    await Form.service_category.set()
    await message.answer(
        "üîå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *VoltHome (–ë–µ—Ç–∞)*!\n\n"
        "–ö–∞–∫–∞—è —É—Å–ª—É–≥–∞ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è?",
        reply_markup=services_kb,
    )

@dp.message_handler(lambda m: m.text == "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!")
async def new_request(message: types.Message):
    await Form.service_category.set()
    await message.answer(random.choice(WELCOME_PHRASES), reply_markup=services_kb)

# --- 1) –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ ---
@dp.message_handler(state=Form.service_category)
async def choose_service(message: types.Message, state: FSMContext):
    txt = (message.text or "").strip()
    if txt.startswith("1"):  # –ß–µ—Ä—Ç—ë–∂
        await state.update_data(service_category="draft", attachments=[])
        await Form.sub_category.set()
        await message.answer("–£—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø —á–µ—Ä—Ç–µ–∂–∞:", reply_markup=draft_sub_kb)
    elif txt.startswith("2"):  # –ù–∞–≥—Ä—É–∑–∫–∏
        await state.update_data(service_category="loads", attachments=[])
        await Form.sub_category.set()
        await message.answer("–ö–∞–∫–æ–π —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –Ω–∞–≥—Ä—É–∑–∫–∞–º?", reply_markup=loads_sub_kb)
    elif txt.startswith("3"):  # –ü–æ–ª–Ω–∞—è
        await state.update_data(service_category="full", attachments=[])
        await Form.object_type.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:", reply_markup=object_type_kb)
    elif txt.startswith("4"):  # –î—Ä—É–≥–æ–µ
        await state.update_data(service_category="other", attachments=[])
        await Form.free_text.set()
        await message.answer("–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è:", reply_markup=cancel_request_kb)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –≤—ã—à–µ.", reply_markup=services_kb)

# --- 2a) –ü–æ–¥—Ç–∏–ø ¬´–ß–µ—Ä—Ç—ë–∂¬ª ---
@dp.message_handler(state=Form.sub_category)
async def choose_subcategory(message: types.Message, state: FSMContext):
    data = await state.get_data()
    svc = data.get("service_category")
    txt = (message.text or "").strip()

    if svc == "draft":
        if txt == "–û–¥–Ω–æ–ª–∏–Ω–µ–π–Ω–∞—è —Å—Ö–µ–º–∞":
            await state.update_data(sub_category="draft_oneline")
        elif txt == "–ú–æ–Ω—Ç–∞–∂–Ω–∞—è —Å—Ö–µ–º–∞":
            await state.update_data(sub_category="draft_mount")
        elif txt == "–î—Ä—É–≥–æ–µ (—á–µ—Ä—Ç—ë–∂)":
            await state.update_data(sub_category="draft_other")
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥—Ç–∏–ø–∞ —á–µ—Ä—Ç–µ–∂–∞.", reply_markup=draft_sub_kb)
            return
        await Form.object_type.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:", reply_markup=object_type_kb)
        return

    if svc == "loads":
        if txt == "–ü–æ–¥–±–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–æ–≤/–£–ó–û":
            await state.update_data(sub_category="loads_pick")
        elif txt == "–ê—É–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞":
            await state.update_data(sub_category="loads_audit")
        elif txt == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ñ–∞–∑–∞–º":
            await state.update_data(sub_category="loads_phases")
        elif txt == "–î—Ä—É–≥–æ–µ (–Ω–∞–≥—Ä—É–∑–∫–∏)":
            await state.update_data(sub_category="loads_other")
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –Ω–∞–≥—Ä—É–∑–∫–∞–º.", reply_markup=loads_sub_kb)
            return
        await Form.object_type.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:", reply_markup=object_type_kb)
        return

    # –µ—Å–ª–∏ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏ ‚Äî –∑–Ω–∞—á–∏—Ç –≤–µ—Ç–∫–∞ ¬´full/other¬ª –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ sub_category
    await message.answer("–≠—Ç–æ—Ç —à–∞–≥ –∑–¥–µ—Å—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ?", reply_markup=new_request_kb)
    await state.finish()

# --- 3) –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ ---
@dp.message_handler(state=Form.object_type)
async def ask_object_type(message: types.Message, state: FSMContext):
    txt = (message.text or "").strip()
    if txt not in {"–ñ–∏–ª–æ–µ", "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ", "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ", "–î—Ä—É–≥–æ–µ"}:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=object_type_kb)
        return

    if txt == "–î—Ä—É–≥–æ–µ":
        await Form.free_text.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞:", reply_markup=cancel_request_kb)
        # –ø–æ–º–µ—Ç–∏–º, —á—Ç–æ —ç—Ç–æ ¬´–¥—Ä—É–≥–æ–µ (—Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞)¬ª
        await state.update_data(_awaiting_custom_object=True)
        return

    await state.update_data(object_type=txt)
    await Form.area.set()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ (–º¬≤):", reply_markup=cancel_request_kb)

# --- ¬´–î—Ä—É–≥–æ–µ¬ª: –ª–∏–±–æ —Å–≤–æ–±–æ–¥–Ω–æ–µ –¢–ó, –ª–∏–±–æ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ ---
@dp.message_handler(state=Form.free_text, content_types=types.ContentType.TEXT)
async def free_text_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    txt = (message.text or "").strip()

    # –µ—Å–ª–∏ –∂–¥–∞–ª–∏ ¬´–∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞¬ª
    if data.get("_awaiting_custom_object"):
        await state.update_data(object_type=f"–î—Ä—É–≥–æ–µ ({txt})", _awaiting_custom_object=False)
        await Form.area.set()
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ (–º¬≤):", reply_markup=cancel_request_kb)
        return

    # –∏–Ω–∞—á–µ —ç—Ç–æ –≤–µ—Ç–∫–∞ ¬´service_category=other¬ª
    await state.update_data(free_text=txt)
    await Form.attachments.set()
    await message.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–ø–ª–∞–Ω/–¢–ó (–ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=attachments_kb,
    )

# --- 4) –ü–ª–æ—â–∞–¥—å ---
@dp.message_handler(state=Form.area, content_types=types.ContentType.TEXT)
async def ask_area(message: types.Message, state: FSMContext):
    raw = (message.text or "").replace(",", ".").strip()
    try:
        area = float(raw)
        if area <= 0:
            raise ValueError
    except Exception:
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–º¬≤).", reply_markup=cancel_request_kb)
        return

    await state.update_data(area=area)
    data = await state.get_data()
    svc = data.get("service_category")

    if svc == "draft":
        # –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ—á–µ–Ω—å –≥—Ä—É–ø–ø?
        await Form.has_list_of_groups.set()
        await message.answer("–ï—Å—Ç—å –ª–∏ –ø–µ—Ä–µ—á–µ–Ω—å –≥—Ä—É–ø–ø/—â–∏—Ç?", reply_markup=yn_kb("groups_yes", "groups_no"))
    elif svc == "loads":
        await Form.groups_count.set()
        await message.answer("–°–∫–æ–ª—å–∫–æ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –≥—Ä—É–ø–ø –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è (–ø—Ä–∏–º–µ—Ä–Ω–æ)?", reply_markup=cancel_request_kb)
    elif svc == "full":
        await Form.rooms.set()
        await message.answer("–°–∫–æ–ª—å–∫–æ –ø–æ–º–µ—â–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä–Ω–æ)?", reply_markup=cancel_request_kb)
    else:
        # –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞—Ç—å
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ?", reply_markup=new_request_kb)
        await state.finish()

# --- 5a) –ü–µ—Ä–µ—á–µ–Ω—å –≥—Ä—É–ø–ø (draft) ---
@dp.callback_query_handler(lambda c: c.data in ("groups_yes", "groups_no"), state=Form.has_list_of_groups)
async def groups_list_cb(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(has_list_of_groups=(callback.data == "groups_yes"))
    await Form.attachments.set()
    await callback.message.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–ø–ª–∞–Ω/–¢–ó (–ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=attachments_kb,
    )

# --- 5b) –ö–æ–ª-–≤–æ –≥—Ä—É–ø–ø (loads) ---
@dp.message_handler(state=Form.groups_count)
async def groups_count_handler(message: types.Message, state: FSMContext):
    raw = (message.text or "").strip()
    if not raw.isdigit():
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ).", reply_markup=cancel_request_kb)
        return
    await state.update_data(groups_count=int(raw))
    await Form.need_inrush.set()
    await message.answer("–£—á–∏—Ç—ã–≤–∞—Ç—å –ø—É—Å–∫–æ–≤—ã–µ —Ç–æ–∫–∏?", reply_markup=yn_kb("inrush_yes", "inrush_no"))

@dp.callback_query_handler(lambda c: c.data in ("inrush_yes", "inrush_no"), state=Form.need_inrush)
async def inrush_cb(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(need_inrush=(callback.data == "inrush_yes"))
    await Form.attachments.set()
    await callback.message.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–ø–ª–∞–Ω/–¢–ó (–ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=attachments_kb,
    )

# --- 5c) –ö–æ–ª-–≤–æ –ø–æ–º–µ—â–µ–Ω–∏–π (full) ---
@dp.message_handler(state=Form.rooms)
async def rooms_handler(message: types.Message, state: FSMContext):
    raw = (message.text or "").strip()
    if not raw.isdigit():
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ).", reply_markup=cancel_request_kb)
        return
    await state.update_data(rooms=int(raw))
    await Form.need_mount_scheme.set()
    await message.answer("–ù—É–∂–Ω–∞ –ª–∏ –º–æ–Ω—Ç–∞–∂–Ω–∞—è —Å—Ö–µ–º–∞?", reply_markup=yn_kb("needmount_yes", "needmount_no"))

@dp.callback_query_handler(lambda c: c.data in ("needmount_yes", "needmount_no"), state=Form.need_mount_scheme)
async def need_mount_cb(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(need_mount_scheme=(callback.data == "needmount_yes"))
    await Form.attachments.set()
    await callback.message.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–ø–ª–∞–Ω/–¢–ó (–ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=attachments_kb,
    )

# --- 8) –ü—Ä–∏—ë–º –≤–ª–æ–∂–µ–Ω–∏–π ---
@dp.message_handler(lambda m: m.text == "–ì–æ—Ç–æ–≤–æ", state=Form.attachments)
async def attachments_done(message: types.Message, state: FSMContext):
    await Form.urgency.set()
    await message.answer("‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:", reply_markup=urgency_kb)

@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.DOCUMENT], state=Form.attachments)
async def collect_attachments(message: types.Message, state: FSMContext):
    data = await state.get_data()
    files: List[Tuple[str, str]] = list(data.get("attachments", []))
    if len(files) >= 10:
        await message.answer("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–π. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return
    if message.photo:
        files.append(("photo", message.photo[-1].file_id))
    elif message.document:
        files.append(("document", message.document.file_id))
    await state.update_data(attachments=files)
    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–π: {len(files)}. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.")

@dp.message_handler(state=Form.attachments)
async def attachments_other_text(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=attachments_kb)

# --- 9) –°—Ä–æ—á–Ω–æ—Å—Ç—å ---
@dp.message_handler(state=Form.urgency)
async def choose_urgency(message: types.Message, state: FSMContext):
    txt = (message.text or "").strip()
    if txt not in URGENCY_COEFFICIENTS:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=urgency_kb)
        return
    await state.update_data(urgency=txt)

    data = await state.get_data()
    svc = data.get("service_category")
    if svc == "draft":
        price_report = calc_price_draft(data)
    elif svc == "loads":
        price_report = calc_price_loads(data)
    elif svc == "full":
        price_report = calc_price_full(data)
    else:  # other
        # –ø—Ä–æ—Å—Ç–æ–π –æ—Ç—á—ë—Ç –±–µ–∑ –∫–∞–ª—å–∫—É–ª—è—Ü–∏–∏
        price_report = (
            "üìù *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:*\n"
            "- –£—Å–ª—É–≥–∞: –î—Ä—É–≥–æ–µ (–ø–æ –æ–ø–∏—Å–∞–Ω–∏—é)\n"
            f"- –°—Ä–æ—á–Ω–æ—Å—Ç—å: {data.get('urgency')} (x{_urgency_coeff(data)})\n"
            "_–°—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –¢–ó._"
        )

    await state.update_data(price_report=price_report)
    await Form.confirm.set()
    confirm_kb = types.InlineKeyboardMarkup().row(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no"),
    )
    await message.answer(price_report)
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É?", reply_markup=confirm_kb)

# --- 10) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
@dp.callback_query_handler(lambda c: c.data in ("confirm_yes", "confirm_no"), state=Form.confirm)
async def confirm_cb(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "confirm_no":
        await state.finish()
        await callback.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=new_request_kb)
        return

    req_num = get_next_request_number()
    data = await state.get_data()
    username = f"@{callback.from_user.username}" if callback.from_user.username else "N/A"

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫
    lines = [
        f"üìã *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞! ‚Ññ{req_num}*",
        f"üë§ {callback.from_user.full_name}",
        f"üÜî {callback.from_user.id} | üìß {username}",
        f"–£—Å–ª—É–≥–∞: {data.get('service_category')} | –ü–æ–¥—Ç–∏–ø: {data.get('sub_category', '‚Äî')}",
        f"–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: {data.get('object_type', '‚Äî')}",
        f"–ü–ª–æ—â–∞–¥—å: {int(float(data.get('area', 0) or 0))} –º¬≤",
    ]

    # –≤–µ—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    if data.get("service_category") == "loads":
        lines += [
            f"–ì—Ä—É–ø–ø: {data.get('groups_count', '‚Äî')}",
            f"–ü—É—Å–∫–æ–≤—ã–µ —Ç–æ–∫–∏: {'–¥–∞' if data.get('need_inrush') else '–Ω–µ—Ç'}",
        ]
    if data.get("service_category") == "full":
        lines += [
            f"–ü–æ–º–µ—â–µ–Ω–∏–π: {data.get('rooms', '‚Äî')}",
            f"–ú–æ–Ω—Ç–∞–∂–Ω–∞—è —Å—Ö–µ–º–∞: {'–Ω—É–∂–Ω–∞' if data.get('need_mount_scheme') else '–Ω–µ –Ω—É–∂–Ω–∞'}",
        ]
    if data.get("service_category") == "draft":
        lines += [f"–ü–µ—Ä–µ—á–µ–Ω—å –≥—Ä—É–ø–ø: {'–µ—Å—Ç—å' if data.get('has_list_of_groups') else '–Ω–µ—Ç'}"]
    if data.get("service_category") == "other" and data.get("free_text"):
        lines += [f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('free_text')}"]

    lines += [
        f"–°—Ä–æ—á–Ω–æ—Å—Ç—å: {data.get('urgency', '‚Äî')}",
        "",
        "üí¨ *–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–∞:*",
        data.get("price_report", "‚Äî"),
    ]
    text = "\n".join(lines)

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∏–∑–∞–π–Ω–µ—Ä—É
    try:
        await bot.send_message(
            chat_id=DESIGNER_CHAT_ID,
            text=text,
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=f"tg://user?id={callback.from_user.id}")
            ),
        )
        for kind, fid in data.get("attachments", []):
            if kind == "photo":
                await bot.send_photo(DESIGNER_CHAT_ID, fid, caption=f"–ó–∞—è–≤–∫–∞ ‚Ññ{req_num}: —Ñ–æ—Ç–æ")
            else:
                await bot.send_document(DESIGNER_CHAT_ID, fid, caption=f"–ó–∞—è–≤–∫–∞ ‚Ññ{req_num}: –¥–æ–∫—É–º–µ–Ω—Ç")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: %s", e)

    await state.finish()
    await callback.message.answer(
        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–æ–º–µ—Ä ‚Ññ{req_num}\n"
        "–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "–ü–æ–º–Ω–∏—Ç–µ, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!",
        reply_markup=new_request_kb,
    )

# -------------------- START/SHUTDOWN --------------------
async def try_set_webhook() -> bool:
    if not WEBHOOK_URL:
        logging.error("WEBHOOK_HOST –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞.")
        return False
    from aiogram.utils.exceptions import TelegramAPIError
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_webhook(WEBHOOK_URL)
        info = await bot.get_webhook_info()
        logging.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s (pending=%s)", info.url, info.pending_update_count)
        return True
    except TelegramAPIError as e:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫: %s", e)
        return False

def start_as_webhook():
    from aiogram.utils.executor import start_webhook
    logging.info("–ó–∞–ø—É—Å–∫–∞—é aiohttp-—Å–µ—Ä–≤–µ—Ä webhook –Ω–∞ %s:%s", WEBAPP_HOST, WEBAPP_PORT)
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=lambda _: init_request_counter(),
        on_shutdown=None,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )

def start_as_polling():
    from aiogram.utils.executor import start_polling
    logging.info("–ó–∞–ø—É—Å–∫–∞—é long polling (skip_updates=True)")
    init_request_counter()
    start_polling(dp, skip_updates=True)

# -------------------- ENTRY --------------------
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
    # –ª–æ–≥–≥–µ—Ä aiogram —á—É—Ç—å –ø—Ä–∏–≥–ª—É—à–∏–º
    logging.getLogger("aiogram").setLevel(logging.INFO)

    # –º–∞–ª–µ–Ω—å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    me = asyncio.get_event_loop().run_until_complete(bot.get_me())
    logging.info("Bot: %s", me.username)

    if USE_POLLING:
        start_as_polling()
    else:
        ok = asyncio.get_event_loop().run_until_complete(try_set_webhook())
        if ok:
            start_as_webhook()
        else:
            logging.info("–§–æ–ª–±—ç–∫ –≤ long polling –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –≤–µ–±—Ö—É–∫–æ–º.")
            start_as_polling()